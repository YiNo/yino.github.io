'use strict';(function(){const t={cache:!0};t.doc={id:"id",field:["title","content"],store:["title","href","section"]};const e=FlexSearch.create("balance",t);window.bookSearchIndex=e,e.add({id:0,href:"/wiki/",title:"airdb.dev",section:"简介",content:"Introduction #  Ferre hinnitibus erat accipitrem dixi Troiae tollens #  Lorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.\n Pedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret  Est simul fameque tauri qua ad #  Locum nullus nisi vomentes. Ab Persea sermone vela, miratur aratro; eandem Argolicas gener.\nMe sol #  Nec dis certa fuit socer, Nonacria dies manet tacitaque sibi? Sucis est iactata Castrumque iudex, et iactato quoque terraeque es tandem et maternos vittis. Lumina litus bene poenamque animos callem ne tuas in leones illam dea cadunt genus, et pleno nunc in quod. Anumque crescentesque sanguinis progenies nuribus rustica tinguet. Pater omnes liquido creditis noctem.\nif (mirrored(icmp_dvd_pim, 3, smbMirroredHard) != lion(clickImportQueue, viralItunesBalancing, bankruptcy_file_pptp)) { file += ip_cybercrime_suffix; } if (runtimeSmartRom == netMarketingWord) { virusBalancingWin *= scriptPromptBespoke + raster(post_drive, windowsSli); cd = address_hertz_trojan; soap_ccd.pcbServerGigahertz(asp_hardware_isa, offlinePeopleware, nui); } else { megabyte.api = modem_flowchart - web + syntaxHalftoneAddress; } if (3 \u0026lt; mebibyteNetworkAnimated) { pharming_regular_error *= jsp_ribbon + algorithm * recycleMediaKindle( dvrSyntax, cdma); adf_sla *= hoverCropDrive; templateNtfs = -1 - vertical; } else { expressionCompressionVariable.bootMulti = white_eup_javascript( table_suffix); guidPpiPram.tracerouteLinux += rtfTerabyteQuicktime(1, managementRosetta(webcamActivex), 740874); } var virusTweetSsl = nullGigo;  Trepident sitimque #  Sentiet et ferali errorem fessam, coercet superbus, Ascaniumque in pennis mediis; dolor? Vidit imi Aeacon perfida propositos adde, tua Somni Fluctibus errante lustrat non.\nTamen inde, vos videt e flammis Scythica parantem rupisque pectora umbras. Haec ficta canistris repercusso simul ego aris Dixit! Esse Fama trepidare hunc crescendo vigor ululasse vertice exspatiantur celer tepidique petita aversata oculis iussa est me ferro.\n"}),e.add({id:1,href:"/posts/creating-a-new-theme/",title:"Creating a New Theme",section:"Blog",content:"Introduction #  This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug $ Some Definitions #  There are a few concepts that you need to understand before creating a theme.\nSkins #  Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page #  The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File #  When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent #  Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter #  The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown #  Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files #  Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template #  A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template #  A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template #  A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site #  Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site #  Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site #  Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme #  Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton #  Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026#34;michael d henderson\u0026#34; description = \u0026#34;a minimal working template\u0026#34; license = \u0026#34;MIT\u0026#34; name = \u0026#34;zafta\u0026#34; source_repo = \u0026#34;\u0026#34; tags = [\u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026#34;YOUR_NAME_HERE\u0026#34; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme #  Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026#34;zafta\u0026#34; baseurl = \u0026#34;\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;zafta - totally refreshing\u0026#34; MetaDataFormat = \u0026#34;toml\u0026#34; :wq $ Generate the Site #  Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\n Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically.  The Home Page #  Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static #  Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle #  When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4.  I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory #  When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option #  Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload #  Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands #  Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026#34;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template #  The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\n index.html _default/list.html _default/single.html  We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page #  Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload #  Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page #  \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts #  Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026#34;\u0026#34; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:54:53-05:00\u0026#34; title = \u0026#34;first\u0026#34; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:57:09-05:00\u0026#34; title = \u0026#34;second\u0026#34; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;, \u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates #  In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage #  The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\n range .Title end  The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts #  We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File #  $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content #  The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/second/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/first/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing #  We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages #  Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026#34;about\u0026#34; description = \u0026#34;about this site\u0026#34; date = \u0026#34;2014-09-27\u0026#34; slug = \u0026#34;about time\u0026#34; +++ ## about us i\u0026#39;m speechless :wq Generate the web site and verify the results.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/theme/\u0026#34;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/about-time/\u0026#34;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/second-post/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/first-post/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026#34;page\u0026#34; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026#34;/:title/\u0026#34; about = \u0026#34;/:filename/\u0026#34; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates #  If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials #  In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials #  The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026#34;theme/partials/header.html\u0026#34; . }} versus\n{{ partial \u0026#34;header.html\u0026#34; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials #  $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts #  It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template #  We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself #  DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"}),e.add({id:2,href:"/posts/migrate-from-jekyll/",title:"Migrate to Hugo from Jekyll",section:"Blog",content:"Move static content to static #  Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png  should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file #  Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site #  The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\n  Change your submodule to point to map gh-pages to public instead of _site (recommended).\n git submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public    Or, change the Hugo configuration to use _site instead of public.\n { .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. }    Convert Jekyll templates to Hugo templates #  That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes #  Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation #  As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag)  is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt;  Usage #  I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}  to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}}  As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches #  Fix content #  Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up #  You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff #   Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"}),e.add({id:3,href:"/posts/goisforlovers/",title:"(Hu)go Template Primer",section:"Blog",content:"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates #  Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax #  Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}  Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}  Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}  Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}  Variables #  Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;  Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }}  Functions #  Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}  Includes #  When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}  Logic #  Go templates provide the most basic iteration and conditional logic.\nIteration #  Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }}  Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }}  Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }}  Conditionals #  If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\n false 0 any array, slice, map, or string of length zero  Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}  Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}  Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}  Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Pipes #  One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}  is the same as\n{{ eq 1 1 | if }} Same {{ end }}  It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}  Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }}  Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }}  Context (aka. the dot) #  The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n {{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }}  Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters #  Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters #  In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026#34;Permalinks\u0026#34; date: \u0026#34;2013-11-18\u0026#34; aliases: - \u0026#34;/doc/permalinks/\u0026#34; groups: [\u0026#34;extras\u0026#34;] groups_weight: 30 notoc: true --- Here is the corresponding code inside of the template:\n {{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }}  Using Site (config) Parameters #  In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams:  CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34;  TwitterUser: \u0026#34;spf13\u0026#34;  SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026#34;text-center\u0026#34;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026#34;twitter\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://twitter.com/{{.}}\u0026#34; rel=\u0026#34;author\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/images/twitter.png\u0026#34; width=\u0026#34;48\u0026#34; height=\u0026#34;48\u0026#34; title=\u0026#34;Twitter: {{.}}\u0026#34; alt=\u0026#34;Twitter\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026#34;recent\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; "}),e.add({id:4,href:"/posts/hugoisforlovers/",title:"Getting Started with Hugo",section:"Blog",content:"Step 1. Install Hugo #  Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs #  Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\n Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop  Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site #  Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop  Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms  Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun #  The best way to learn something is to play with it.\n"}),e.add({id:5,href:"/menu/",title:"Index",section:"简介",content:"  语言\n   Golang\n  go-laravel  垃圾回收  Go并发原理及GPM调度策略  常用函数库  百万聊天系统架构  通过go阻塞优化db查询     Python\n  selenium  uswgi与nginx  数据集  COMMON函数  threading  queue  tf-idf 文本分类     PHP\n  fpm优化  excel导出  对象与数组相互转换     VUE\n  iView案例     数据库\n   MySql\n  事务隔离级别  mysql异步复制  创建函数  忘记密码  创建用户并授权  常见函数     Redis\n  异步复制     Mango   WebServer\n   Nginx\n  禁网段  rewrite与proxy_pass     Linux\n  CentOS搭建Shadowsocks服务端  常用命令    docker\n  常用命令    微服务\n  consul    领域驱动设计\n  示例  domain  PO-DO-VO-DTO  步骤     目标/规划\n   目标\n   规划\n  "}),e.add({id:6,href:"/wiki/DDD/domain/",title:"Domain",section:"领域驱动设计",content:"  domain 实体 （model） a. 唯一要素（必须有唯一标识）\nb. 实体只能通过唯一标识来判断两者是否想同\n  值对象 实体的额外信息\na. 值对象 只能通过值判断两者是否相同 用来描述用户的额外信息\n  聚合 a. 包括一组领域对象（包括实体和值对象），完整描述一个领域业务，其中必然有个根实体。这个叫做聚合根。\n i. 例： 比如用户登录这个聚合，用户实体就是聚合根（包含了各个值对象）\rii. 例： 用户日志功能。其中用户日志包含了，用户登录日志，用户购买日志，用户充值日志。 这三个聚合。用户实体都是他们的聚合根。\r b. 聚合和聚合之间可以相互引用但是 是根之间相互引用\n  仓储 （repository）：为每一个聚合根实体创建一个仓储接口，并且不和底层数据库交互。作用：更好的把我们的精力集中在领域逻辑上 ()\n  DTO 数据传输对象 http 响应字段\n  "}),e.add({id:7,href:"/wiki/DDD/PO-DO-VO-DTO/",title:"Po Do Vo Dto",section:"领域驱动设计",content:"VO（View Object）：视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。 用户提交的数据 req\nDTO（Data Transfer Object）：数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。将VO转换为服务(DO)所需要的参数.\nDO（Domain Object）：领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。\nPO（Persistent Object）：持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。\nVO与DTO的区别\n大家可能会有个疑问（在笔者参与的项目中，很多程序员也有相同的疑惑）：既然DTO是展示层与服务层之间传递数据的对象，为什么还需要一个VO呢？对！对于绝大部分的应用场景来说，DTO和VO的属性值基本是一致的，而且他们通常都是POJO，因此没必要多此一举，但不要忘记这是实现层面的思维，对于设计层面来说，概念上还是应该存在VO和DTO，因为两者有着本质的区别，DTO代表服务层需要接收的数据和返回的数据，而VO代表展示层需要显示的数据。 用一个例子来说明可能会比较容易理解：例如服务层有一个getUser的方法返回一个系统用户，其中有一个属性是gender(性别)，对于服务层来说，它只从语义上定义：1-男性，2-女性，0-未指定，而对于展示层来说，它可能需要用“帅哥”代表男性，用“美女”代表女性，用“秘密”代表未指定。说到这里，可能你还会反驳，在服务层直接就返回“帅哥美女”不就行了吗？对于大部分应用来说，这不是问题，但设想一下，如果需求允许客户可以定制风格，而不同风格对于“性别”的表现方式不一样，又或者这个服务同时供多个客户端使用（不同门户），而不同的客户端对于表现层的要求有所不同，那么，问题就来了。再者，回到设计层面上分析，从职责单一原则来看，服务层只负责业务，与具体的表现形式无关，因此，它返回的DTO，不应该出现与表现形式的耦合。 理论归理论，这到底还是分析设计层面的思维，是否在实现层面必须这样做呢？一刀切的做法往往会得不偿失，下面我马上会分析应用中如何做出正确的选择。\n"}),e.add({id:8,href:"/wiki/DDD/%E5%AE%9E%E8%B7%B5/",title:"实践",section:"领域驱动设计",content:"项目地址 #  项目简介 #  此项目是打造一个nlp的开源平台，并提供相应的api；用户可根据自己的应用场景去选择相应的模型，同时用户可以根据自己的数据去训练，达到更高的效果。\n现有以下几种场景：\n1. QA（问答系统）根据用户输入的问题，去自己的训练库中咨询查找匹配的问题。 2. 文本纠错。 3. 闲聊对话，根据用户输入的文本，去系统文本库中匹配文本，达到一个与用户交互的模式。 欢迎大佬一起参与！\n架构 #     nlp-template VUE开发模板\n   nlp-controller golang开发上层业务\n   nlp-model py开发 模型\n  nlp-controller 项目架构 #  项目采用DDD(Domain Driven Design)架构，\nnlp-controller ├── application ├── domain │ ├── aggregate │ │ └── qa_question_factory.go │ ├── entity │ │ │── qa_question.go │ │ └── user.go │ ├── event │ ├── po │ │ │── user.go │ │ │── user_ak.go │ │ └── qa_question.go │ ├── repository │ │ │── question.go │ │ └── user.go │ ├── vo │ │ │── req.go │ │ └── vo.go │ ├── qa.go │ ├── qa_test.go │ ├── user.go │ └── user_test.go ├── config │ ├── cache │ ├── databases │ | └── mysql.go │ ├── log │ | └── log.go │ ├── router │ | ├── core.go │ | └── route.go │ └── config.go ├── docs ├── infrastructure │ ├── persistence │ | ├── db.go │ | ├── qa_repository.go │ | └── user_repository.go │ └── common.go ├── interface │ ├── corp │ | ├── common.go │ | ├── question_handler.go │ | └── user_handler.go └── ├── middleware  | └── corpAuthToken.go  ├── common.go  └── error.go 目录结构 #  application 是应用目录 调度domain及返回interface #  domain-领域模型 #   aggregate 聚合工厂 entity 实体 event 领域事件 po 持久化对象 repository 工厂 vo  req.go 输入 vo.go 输出 *.go 服务对象 *_test.go 测试    config - 配置文件 #   cache 缓存 databases 持久化数据库  mysql.go mysql数据库   log  log.go uber zap log   router  *.go 路由注册   config.go 配置文件  swagger #  infrastructure-持久化数据 #   persistence mysql数据持久  *.go 对应repository   common.go 公用func  interface-接口层 #   corp corp module middleware 中间件 common.go 公用func error.go 响应码  "}),e.add({id:9,href:"/wiki/DDD/%E6%AD%A5%E9%AA%A4/",title:"步骤",section:"领域驱动设计",content:"步骤 1. 需求分析（统一语言：比如PPT、原型图 需统一！） 2. 领域分析 3. 领域边界划分 4. 领域建模 5. 核心业务逻辑 6. 技术细节  Domain StoryTelling  Pictograms and VOcabulary  1. Actors - 角色参与者故事场景参与者  2. WorkObjects - 参与者与参与者传递的信息  3. Activities - 关系 Actors 与 WorkObjects 关系  4. Annotations - 解释  Domain Design  1. DDD  a. Bounded Context - 界限上下文  b. Aggregate - 聚合根  c. Entities - 实体  i. 唯一标识  ii. 有状态  iii. 例如订单实体  d. Value Object - 值对象  i. 无实体  ii. 例如订单中的 address 改变并不会影响订单  e. Services -  i. 在entities 满足不了  ii. 无状态逻辑  iii. 例如: 转账 A-\u0026gt;B A与B都是实体； 并不会影响Entities状态  f. DomainEvents - 领域事件  i. 例如：订单支付完成  g. Factories - 工厂  h. Repositories - 贮藏室 数据库落户对象 "}),e.add({id:10,href:"/wiki/DDD/%E7%A4%BA%E4%BE%8B/",title:"示例",section:"领域驱动设计",content:"电商领域： 核心领域 销售\n支撑子域 除去销售外的其他子域\r通用子域 比如：通知（短信等）\r 界限上下文\n目的：控制边界\r 领域模型\n先抽象领域\n领域：反应业务上需要解决的问题\n四层架构\ninterface 用户展示层\napplication 应用层 协调工作层\ndomain 领域层 业务规则\n基础设施层 mysql中间件等\n拆分 微服务设计原则\n1. 要领域驱动设计，而不是数据驱动设计，也不是界面驱动设计\r2. 要边界清晰的微服务。而不是泥球\r3. 要职能清晰的分层，而不是什么都放一起\r4. 不能过度拆分 "}),e.add({id:11,href:"/wiki/DDD/%E8%81%9A%E5%90%88/",title:"聚合",section:"领域驱动设计",content:"什么是聚合？ #  Aggregate就是一组相关对象的的集合，我们把它作为数据修改和访问的单元。\n聚合关系 （核心两点） #  若一个个体在整体没有创建之前就已经存在，则不是聚合。\n若一个个体消亡了，与这个个体相关的，同时消亡则就是聚合。\n例子 #  1. 如果一个客户消亡，则客户的联系方式、多张银行卡信息将不再有任何意义 2. 如果一张采购订单取消，则采购订单的商品明细则没有任何存在的意义。 3. 医生与处方：若医生不存在了，处方依旧有效，若处方不存在了，医生依旧有效；所以两者不是聚合； 4. 处方与药品明细（处方明细）： 若处方不存在则处方对应的药品明细就没有实际的作用。因此两者是聚合； "}),e.add({id:12,href:"/wiki/Docker/Dockerfile/",title:"Dockerfile",section:"Docker",content:""}),e.add({id:13,href:"/wiki/Docker/nginx-php-mysql%E4%B8%80%E4%BB%B6%E9%83%A8%E7%BD%B2/",title:"Nginx Php Mysql一件部署",section:"Docker",content:"nginx-php-mysql #  nginx php mysql 一件部署\n目录结构 #  config.d --nginx 配置文件地址 编写vhost php/conf -- php 配置文件地址 www -- 将自己的代码部署到 www目录下 mysql/conf -- mysql配置文件 mysql/data -- mysql数据文件 mysql/logs -- mysql log文件 "}),e.add({id:14,href:"/wiki/Docker/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",title:"常用命令",section:"Docker",content:"docker\ndocker run -it --rm ubuntu:16.04 /bin/bash # 使用shell 脚本 ## 将指令输出到控制台 docker run ubuntu:16.04 /bin/sh -c \u0026#34;while true;do echo hello world;sleep 1; done\u0026#34; ## 后台运行 docker run -d ubuntu:16.04 /bin/sh -c \u0026#34;while true;do echo hello world;sleep 1; done\u0026#34; docker build -t xxxx:xxxx . docker-compose\ndocker-compose up . docker-compose restart "}),e.add({id:15,href:"/wiki/go/go-laravel/",title:"Go Laravel",section:"Golang",content:"Golang-Laravel #  模仿PHP-Laravel，开箱即用、go语言版的laravel，phper转Go开发1 可以立马上手~\npackage #    gin  gorm  go-redis  go laravel   支持功能 #   路由 中间件 路由中间件 控制器 模型 验证器（*默认是英文，将其翻译为中文）   目录结构 #  与laravel几乎一模一样\napp	应用目录\r|---- exception	返回http状态及异常接收\r|----|---- baseException.go panic异常接收文件\r|---- http	web核心目录\r|----|---- controller 控制器存放目录\r|----|---- middleware 路由中间件存放目录\r|---- models	模型存放目录\r|---- service	业务编写目录\r|---- validate	验证器目录\r|---- helpers.go 常用函数文件\rconfig\r|----|----app.go 应用配置 如：ip、port等\r|----|----databases.go 数据库配置\rextend	自定义扩展包\r|----|---- log	自定义日志package(与系统log相同，增加按小时分割日志)\rroutes	路由文件夹\r|----|---- route.go	路由控制目录\r|----|---- .....	更多路由\rsql	测试sql文件存放目录\rtest 压力测试文件目录\r|----|---- abtest.sh ab压力测试文件\r|----|---- .....	配置 Or Log文件 vendor	扩展包目录\r|----|---- .....	包存放\r  还在完善中 目前发现不合理地方 在返回success状态码 目前是用panic抛出异常返回，有为常理。 注意路由文件编写，必须 在router.go文件中调用 将sql/databases.go 文件 数据连接信息一改，运行 go run main.go 即可使用   项目注意事项 #   重新定义 log(/extend/log)模块 将日志分割 storage/logs/Year/Month/Day/Hour.txt gorm 更改了 软删除 默认是 is null(/vendor/github.com/jinzhu/gorm/scope.go line 719) 本项目更改为 deleted_at=0 根据自己项目需求更改 config/database.go mysql 连接配置 需 config/redis.go redis 连接配置 需修改 路由 在 /routes 中定义 要在 route.go 引入自己创建的 目前并不会自动引入 运行命令 go run main.go   go语言常用简介 #  自己总结有误则提醒，修改\n defer 延迟执行 defer标识的函数 在当前函数末尾执行 多个defer时以“压栈”的方式执行（先进后出） 例：main.go 中的 mysql、redis关闭连接 struct 结构体 go 语言没有class的概念 但是可以通过结构体来实现 class 输出到控制台 fmt.Println(\u0026ldquo;string\u0026rdquo;) 本项目中 可以使用log.Println(\u0026quot;\u0026hellip;.\u0026quot;) 输出到控制台同时记录log 常用数据结构 map int string float64 struct interface等 在数据类型是interface时 引用时 要进行‘断言’ 示例：/app/models/baseModel.go line 29   更新log #  2020-11-09 #   mysql连接池验证 压力测试 增加自定义log模块 (在config中自定义log路径，package path /extend/log，按小时分割日志) 增加压力测试模块  2020-11-06 #   增加mysql连接池  2020-11-10 #   增加redis 连接池  2020-11-11 #   修改log模块 获取当天日期 增加autoload 将方法封装 使入口文件简单清晰  2020-12-31 示例 #   增加 example 示例 包含 server(BE)、template(FE) 可运行docker-compose （go 环境） 将 server/sql 文件导入到本地库中 修改config 的ip post-man-go-api.json 所有的 api json 文件 server /extend 中增加了对redis 的log记录 以及前缀  "}),e.add({id:16,href:"/wiki/go/Go%E5%B9%B6%E5%8F%91%E5%8E%9F%E7%90%86%E5%8F%8AGPM%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A5/",title:"Go并发原理及 Gpm调度策略",section:"Golang",content:"并发\u0026amp;并行 #  Go应该是在内核级现成的基础上做了一层l逻辑上的虚拟线程（用户级线程）+ 线程调度系统 #   假如我们有一段CPU密集型任务 我们创建2000个goroutine 是否真的将性能提高2000倍，其实并不能； 我们只是进行2000并发（concurrenc） 而并没有真正做到并行（parallelism）。 并发是指我们的程序执行逻辑，传统单线程应用的程序逻辑是顺序执行的，在任何时刻，程序只能处理同一个逻辑，而并发是指，我们同时执行多个独立的程序逻辑，若干个程序逻辑在执行时可以是同时进行的（但不代表同时进行处理 其实还是一次处理一个）。实际上，不论我们并发多少个程序逻辑，若我们仅仅运行在一个单核单线程的CPU上，都不能让你的程序在性能上有所提升，因为最终所有任务都排队等待CPU资源（时间片）. 而并行才能让我们的程序真正的同时处理多个任务，但并行并不是编程语言能够带我们的特性，他需要硬件支持。上面说到单核CPU所有资源都要等待同一个CPU的资源，那么其实我们只要将CPU增多就能真正的让我们实现并行。我们可以使用多核CPU或用多台服务器组成服务集群，均可实现真正的并行，能够并行处理的任务数量也就是我们的CPU数量。\nCPU密集\u0026amp;I/O密集 #   如果我们的程序是CPU密集型（计算型，深度学习等），使用并发编程，可能确实无法提升我们程序的性能，甚至有可能会下降，创建线程等也是会消耗资源的。 如果我们的程序是I/O密集型，当你在进行程序压测时CPU可能很低，但性能却到了瓶颈，原因时大部分时间都浪费在了等待I/O的过程中；如果我们在等待I/O的同时继续去执行其他的程序逻辑即可提高CPUl利用率，从而提高程序的性能，这就是并发编程的优点；例如Python因为GIL的存在实际上并不能实现真正的并行，但他的多线程依旧在IO密集型的程序中依旧有种很重要的意义；（遇到I/O操作 则切换线程；单线程+ 协程可能更优；减少了切换线程的开销）；\nGoroutine（Golang Coroutine） #   使用多核CPU实现并行处理，使应用在多核cpu实现并行处理的方案主要是多进程与多线程两种方式，多进程模型相对简单，但是有着资源开销大及进程间通信成本高的问题。多线程模型相对复杂，会有死锁，线程安全，模型复杂等问题，但却因为资源开销及易于管理等优点适用于对于性能要求较高的应用。 Golang采用的是多线程模型，更详细的说他是一个两级线程模型，但它对系统线程（内核级线程）进行了封装，暴露了一个轻量级的协程goroutine（用户级线程）供用户使用，而用户级线程到内核级线程的调度由golang的runtime负责，调度逻辑对外透明。 goroutine的优势在于上下文切换在完全用户态进行，无需像线程一样频繁在用户态与内核态之间切换，节约了资源消耗。\nG·P·M #  G（Goroutine） ：我们所说的协程，为用户级的轻量级线程，每个Goroutine对象中的sched保存着其上下文信息\nM（Machine） ：对内核级线程的封装，数量对应真实的CPU数（真正干活的对象）、系统的\nP（Processor） ：即为G和M的调度对象，用来调度G和M之间的关联关系，其数量可通过GOMAXPROCS()来设置，默认为核心数 他代表了真正的并发度，即有多少个goroutine可以同时运行\n"}),e.add({id:17,href:"/wiki/go/one_way/",title:"One Way",section:"Golang",content:"one way #   github gitee\n应用场景 #  在高并发场景下，n个用户同时查询同一个商品详情就会对应n个db查询，如果能将n个db查询合并成一个db查询，那么性能db的性能肯定会提升很多，此工具包就是为了解决此问题\n优点 #   减少了db压力 解决了缓存击穿问题；若此时key刚好失效那么到db的请求始终只会有一个  应用方式： #  round := 10 var wg sync.WaitGroup barrier := onceFlight.NewOnceFlight() wg.Add(round) for i := 0; i \u0026lt; round; i++ {  go func() {  defer wg.Done()  // 启用10个协程模拟获取缓存操作  val, err := barrier.Do(\u0026#34;get_rand_int\u0026#34;, func() (interface{}, error) {  time.Sleep(time.Second)  return rand.Int(), nil  })  if err != nil {  fmt.Println(err)  } else {  fmt.Println(val)  }  }() } wg.Wait() 以上代码模拟了10个goroutine 去获取db数据；第一个参数key，可以理解为标示符，第二个参数是匿名函数，封装好要做的业务逻辑。最终获得结果是\n=== RUN TestNewOnceFlight 5577006791947779410 5577006791947779410 5577006791947779410 5577006791947779410 5577006791947779410 5577006791947779410 5577006791947779410 5577006791947779410 5577006791947779410 5577006791947779410 --- PASS: TestNewOnceFlight (1.00s) 可直接运行代码库中的once_flight_test.go\n代码解读： #  func (g *onceGroup) createCall(key string) (*call, bool) { 	g.mutex.Lock() 	// defer g.mutex.Unlock() 	// 其他相同请求 	if c, ok := g.calls[key]; ok { 	g.mutex.Unlock() 	c.wg.Wait() 	return c, true 	} 	// 第一个请求 	c := new(call) 	c.wg.Add(1) 	g.calls[key] = c 	g.mutex.Unlock() 	return c, false }  // makeCall . func (g *onceGroup) makeCall(c *call, key string, fn func() (interface{}, error)) { 	defer func() { 	g.mutex.Lock() 	delete(g.calls, key) 	g.mutex.Unlock() 	c.wg.Done() 	}() 	c.val, c.err = fn() } 此代码充分利用了 数据结构map，若map存在则证明已经有goroutine去查询了，当前goroutine只需要等待即可；map在go中是非线程安全的因此需要加锁\n总结 #  善用wg.wait去完成协程阻塞场景；\n通过匿名函数完成业务逻辑\n代码还有优化空间，加锁会导致延迟等，能否通过sync.map 线程安全的 map完成或通过原子变量完成，有待实践且优化\n"}),e.add({id:18,href:"/wiki/go/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/",title:"垃圾回收",section:"Golang",content:"垃圾回收 #   概述 GC \u0026amp; RC  垃圾回收的由来 逃逸分析的由来   垃圾回收，怎么实现？  什么样的是垃圾？ 怎么把垃圾找出来？ 内存屏障    概述 #  现代编程语言一般都有垃圾回收功能。这个能极大的减轻程序员的负担，并且减少大部分场景的问题。\nGC \u0026amp; RC #  RC: 引用计数管理内存的方式 1. 使用前，为了保护对象不被销毁，计数 +1 2. 使用完后，计数 -1，计数减到 0 之后，就可以安全销毁了 GC: 垃圾回收管理内存的方式\ngolang 的垃圾回收我们经常听到三色标记法，三色指的是白色，灰色，黑色，分别表示三种状态，至于三色标记法的理论此处不表，我们从简单的理解切入。\r 怎么把垃圾找出来？ #  方法：从根处扫描，把所有的根扫描完，每个根扫描到底。按照之前的三色标记来说，扫描完了的是黑色，正在扫描的是灰色的，没扫描的是白色的。根扫描完了，那么最后只会剩下两种颜色的，黑色，白色。白色就是没用的垃圾，这种清理掉就没事。\r根：栈，是扫描的起点，还有一些全局变量也是根，是起点\r所谓的垃圾只对于堆上来说。栈上内存是编译器管理的，堆上内存是业务分配，垃圾回收器回收 垃圾怎么回收？怎么有效安全的回收？ #  起初的是最简单的思路STW(stop the world)，暂停所有程序，等待垃圾回收完再运行程序。当然这种模式在生产中不合适后又优化为 扫描-标记-清除\n"}),e.add({id:19,href:"/wiki/go/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%BA%93/",title:"常用函数库",section:"Golang",content:"Golang-common #  安装 #  go get github.com/yino/common InArray #  判断对象是否在 array 中 返回 bool\nArraySearch #  判断对象是否在 array 中 返回 int, bool (false 则不存在)\nMapSearch #  判断对象是否在 map 中 返回interface, bool (false 则不存在)\n"}),e.add({id:20,href:"/wiki/go/%E7%99%BE%E4%B8%87%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/",title:"百万聊天系统架构",section:"Golang",content:"聊天系统架构 百万级 B/S #  场景：100w人同时在线\n技术选型 #  B/S架构下 通常有两种方案： 1. 客户端主动向服务器拉取数据 2. 服务器主动向客户端发送数据 以上两种情况在B/S架构下通常对应着：http轮询 和 websocket 在线用户达到一定量级情况下，客户端主动拉取数据就会达到一定的瓶颈：对单表、api压力过大； 因此在用户量级略高的情况下建议采用 websocket websocket单机架构 #  websocket 单机架构 代码案例地址: gitee github\n技术难点 #   内核瓶颈  推送量大：100W*10条/秒=1000W条/秒 内核瓶颈：linux内核发送TCP极限包频≈100w 锁瓶颈  需要维护一个100w人的流量在线集合，通常是一个字典结构 推送消息即遍历整个集合，顺序发送消息，耗时极长 推送期间，客户端一直在进行上下线，所以需要对 map上锁 cpu瓶颈  浏览器与服务器之间通常采用json格式通讯 json编码非常消耗cpu 每秒100w次json encode 解决方案 #   内核瓶颈  减少网络小包的发送 将同一秒内推送的弹幕合并成一条，合并后每秒推送次数只等于在线连接数 锁瓶颈  大锁拆为多个小锁 创建原子变量，每个连接可以+1分配到一个唯一id，利用ID做hash取模到某个set中推送消息即遍历整个集合，顺序发送消息，耗时极长 连接打散到多个集合中，每个集合有自己的锁 多线程并发推送多个集合，避免锁的竞争 读写锁取代互斥锁，多个推送任务可以并发便利相同集合 cpu瓶颈   浏览器与服务器之间通常采用json格式通讯，json编码非常消耗cpu，每秒100w次json encode；因此减少计算次数 单机瓶颈 还有以下\n维护海量长链接会花费不少内存 消息推送瞬时消耗大量CPU资源 消息推送瞬时带宽高达400～600M（4-6Gbits）,是主要瓶颈  websocket分布式架构 #  网关集群 #   通过负载均衡将连接打散在不同的网关服务器上，网关服务器可横向扩展；\n但是会引出一个新的问题：当服务器推送消息时如何知道指定的用户在哪个服务器上： 最简单的解决方案是：将消息广播到所有的网关服务器上，网关服务器自主去决策是否在当前服务器，并进行发送；因此需要一个逻辑集群\n逻辑集群 #  基于HTTP/2 协议向gateway 集群分发消息；HTTP/2 支持连接复用，用作RPC性能更佳；\n基于HTTP/1 协议对外提供推送API；HTTP/1 更加普及，对业务更加友好； 当然我们也可以将逻辑集群中的HTTP 更换为消息中间件，采用消息订阅的方式分发给gateway；\n"}),e.add({id:21,href:"/wiki/Linux/CentOS%E6%90%AD%E5%BB%BAShadowsocks%E6%9C%8D%E5%8A%A1%E7%AB%AF/",title:"Cent Os搭建 Shadowsocks服务端",section:"Linux",content:"CentOS搭建Shadowsocks服务端 最新方法： 1.安装 直接依次执行下列命令：\nyum install python-setuptools easy_install pip pip install shadowsocks 即可完成Shadowsocks服务端安装。 2、配置 新建/etc/shadowsocks.json文件，内容如下\n{ \u0026#34;server\u0026#34;:\u0026#34;服务器IP\u0026#34;, \u0026#34;server_port\u0026#34;:8388, \u0026#34;local_address\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;local_port\u0026#34;:1080, \u0026#34;password\u0026#34;:\u0026#34;密码\u0026#34;, \u0026#34;timeout\u0026#34;:300, \u0026#34;method\u0026#34;:\u0026#34;aes-256-cfb\u0026#34;, \u0026#34;fast_open\u0026#34;: false } 3、运行 前台运行(Ctrl+C或者关闭终端服务会自动停止)：\nssserver -c /etc/shadowsocks.json  后台运行(推荐，关闭终端后服务会继续运行)： ssserver -c /etc/shadowsocks.json -d start ssserver -c /etc/shadowsocks.json -d stop  "}),e.add({id:22,href:"/wiki/Linux/%E5%88%86%E7%BB%84/",title:"分组",section:"Linux",content:"用户分组 #  场景， #  比如刚下载docker、nginx等一些应用时，使用 sudo下载，则当前用户没有权限去操作此应用\n# 查看分组 cat /etc/group  # 查看当前用户 $USER  #将当前用户添加到 分组中 xxx代表分组 sudo gpasswd -a $USER xxx  # 切换到xxx分组 xxx 代表分组 newgrp xxx "}),e.add({id:23,href:"/wiki/Linux/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",title:"常用命令",section:"Linux",content:"防火墙\n# 模拟socketserver端  nc -l 127.0.0.1 8800  #共享linux命令行 tmux  #开启防火墙  ufw enable  # 置顶ip访问置顶端口  ufw allow from xx.xx.xx.xx to any port 22  #查看所有磁盘是用百分比 df -h  #查看具体文件大小 du -sh /* --exclude proc  #后台挂载 nohup php7.0 run.php \u0026gt;\u0026gt; run.log 2\u0026gt;\u0026amp;1 \u0026amp;  #修改默认编辑器 select-editor  #抓包 tcpdump -i eth0 udp tcpdump -i eth0 udp port 12345  # sftp useradd -d /var/www/html/www.xxx.com -m xxx passwd xxx chown -R xxx:xxx /var/www/html/www.xxx.com chmod -R 744 /var/www/html/www.xxx.com "}),e.add({id:24,href:"/wiki/MySql/mysql%E5%BC%82%E6%AD%A5%E5%A4%8D%E5%88%B6/",title:"Mysql异步复制",section:"MySql",content:"#master\n配置文件开启(master) server-id = 1 log_bin = /var/log/mysql/mysql-bin.log expire_logs_days = 10 max_binlog_size = 100M  #创建用户 并赋予复制权限（master） create user \u0026#39;test\u0026#39;@\u0026#39;192.168.0.%\u0026#39; identified by \u0026#39;\u0026#39;; grant replication slave on *.* to \u0026#39;test\u0026#39;@\u0026#39;192.168.0.%\u0026#39;; flush privileges; #刷新权限 show master status; #查看master状态 binlog日志，position 导出master 数据 mysqldump --single-transaction --master-data=2 --triggers --routines --all-databases -uroot -p \u0026gt; all.sql #slave\n将all.sql 复制到slave 服务上 scp all.sql user@ip:/var/log/mysql 导入 master 数据 mysql -uroot -p\u0026lt; all.sql 修改与master的链接 change master to master_host = \u0026#39;192.168.1.1200\u0026#39;, master_user=\u0026#39;dba\u0026#39;， master_password=\u0026#39;123456\u0026#39;, master_log_file = \u0026#39;master-bin.000002\u0026#39;, #来自于show master status; 中的bin-log字段 master_log_pos=154; #来自于show master status; 中的postition字段 #查看slave status 状态 Start slave;（开启）;开启 show slave status \\G;(查看主从进程连接状态) Slave_IO_Running，Slave_SQL_Running 配置成功后 这俩状态是YES "}),e.add({id:25,href:"/wiki/MySql/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/",title:"事务隔离级别",section:"MySql",content:"事务的隔离级别 #    READ-UNCOMMITTED 可以读取事务未提交的数据；\n若新增或修改的数据 在事务中 但是事务没有提交时\n在其他事务中是能看到此次提交或修改后的数据。\nA事务　插入数据　未提交\nB事务　可以查看到A　事务中的插入数据\n  READ-COMMITTED 读取已经提交的数据；\n只能看到提交后的数据。未提交的看不到。\nA事务插入数据　未提交\nB事务读取数据　不会读取到未提交事务的数据\n  REPEATABLE READ mysql 默认的事务隔离级别；他确保同一事务的多个实例在并发读取时，会看到同样的数据行；\n比如A，B开启事务\nA执行ｓｅｌｅｃｔ\nB执行　ｉｎｓｅｒｔ　提交\nA再次执行　ｓｅｌｅｃｔ时　依旧看不到B插入的数据；\n当A要插入重复数据时（有主键或者唯一索引限制时），则插入失败，因为数据已存在，只是在A事件中看不到；\n  ４. Serializable 事务最高的隔离级别，这个就比较狠了，并发下不适合使用，容易造成大量的阻塞；\n 例子（操作同一张表）：\r１）\rA开启事务　执行插入语句未提交；\rB执行清空表　则阻塞，A不提交B一直阻塞，等待A的事务完成；\r２）\rA开启事务　执行写操作时，未提交；\rB开启事务　执行任何操作　全部阻塞等待A事务的提交完成；\rC等待Ｂ．．．．序列化的等待； "}),e.add({id:26,href:"/wiki/MySql/%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0/",title:"创建函数",section:"MySql",content:"创建函数\nCREATE DEFINER=`location`@`%` PROCEDURE `create_slave_tract`() BEGIN  declare str_date varchar(16);  SET str_date = date_format(now(),\u0026#34;%Y%m%d\u0026#34;);   SET @sqlcmd2 = concat(\u0026#39;create table tb_slave_track_\u0026#39;,str_date,\u0026#34;(`id` int(10) NOT NULL AUTO_INCREMENT, `longitude` char(60) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `latitude` char(60) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `create_time` datetime(0) NULL DEFAULT NULL, `slave_id` int(11) NULL DEFAULT NULL, `code` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `electric_quantity` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `speed` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `elevation` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `pose` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `ip` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `port` int(10) NULL DEFAULT NULL, `frequency` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `signal` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `IMSI` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `type` TINYINT(1) NULL DEFAULT NULL, PRIMARY KEY (`id`) USING BTREE )\u0026#34;);  PREPARE p2 FROM @sqlcmd2;  EXECUTE p2;  DEALLOCATE PREPARE p2; END "}),e.add({id:27,href:"/wiki/MySql/%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%B9%B6%E6%8E%88%E6%9D%83/",title:"创建用户并授权",section:"MySql",content:"创建用户及密码及授权 #  //创建用户 create user \u0026#39;username\u0026#39;@\u0026#39;ip\u0026#39; identified by \u0026#39;password\u0026#39;; //授权 (备注) grant all(select,insert,update,delete) on databasesname.tablename(*) to \u0026#39;username\u0026#39;@\u0026#39;ip\u0026#39;; "}),e.add({id:28,href:"/wiki/MySql/%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/",title:"常见函数",section:"MySql",content:"常用函数 #  inet_aton() inet_ntoa() // 举例: INSERT INTO sessions(ipaddress) VALUES(INET_ATON(\u0026#39;192.168.0.1\u0026#39;)); select INET_NTOA(ipaddress) from sessions; "}),e.add({id:29,href:"/wiki/MySql/%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/",title:"忘记密码",section:"MySql",content:"忘记密码 #  mysql配置文件下增加 可跳过密码登录 然后 再去修改root密码就好: \u0026ndash;skip-grant-tables\n"}),e.add({id:30,href:"/wiki/Nginx/rewrite%E4%B8%8Eproxy_pass/",title:"Rewrite与proxy Pass",section:"Nginx",content:"rewrite 与 proxy_pass #  rewrite #   如果正则表达式（regex）匹配到了请求的URI（request URI），这个URI会被后面的replacement替换 rewrite的定向会根据他们在配置文件中出现的顺序依次执行 通过使用flag可以终止定向后进一步的处理 如果replacement以“http://”, “https://”, or “$scheme”开头，处理将会终止，请求结果会以重定向的形式返回给客户端（client） 如果replacement字符串里有新的request参数，那么之前的参数会附加到其后面，如果要避免这种情况，那就在replacement字符串后面加上“？”，eg： rewrite相当于是重定向到了目标网站，浏览器会跳转到目标网站   rewrite ^/users/(.*)$ /?user=$1? last;= proxy_pass #   不影响浏览器地址栏的url 设置被代理server的协议和地址，URI可选（可以有，也可以没有） 协议可以为http或https 地址可以为域名或者IP，端口可选；eg：   proxy_pass http://localhost:8000/uri/;  如果proxy_pass的URL定向里包括URI，那么请求中匹配到location中URI的部分会被proxy_pass后面URL中的URI替换，eg：  location /name/ {  proxy_pass http://127.0.0.1/remote/; } 请求http://example.com/name/test.html 会被代理到http://127.0.0.1/remote/test.html  如果proxy_pass的URL定向里不包括URI，那么请求中的URI会保持原样传送给后端server，eg：  location /name/ {  proxy_pass http://127.0.0.1; }  请求http://example/name/test.html 会被代理到http://127.0.0.1/name/test.html "}),e.add({id:31,href:"/wiki/Nginx/%E7%A6%81%E7%BD%91%E6%AE%B5/",title:"禁网段",section:"Nginx",content:"nginx 禁网段 #  单看nginx模块名ngx_http_access_module,很多人一定很陌生，但是deny和allow相比没一个人不知道的，实际上deny和allow指令属于ngx_http_access_module.我们想控制某个uri或者一个路径不让人访问，在nginx就得靠它了。\nnginx的访问控制模块语法很简单，至少比apache好理解，apache的allow和deny的顺序让很多初学者抓头.好了具体看下这个插件的使用方法吧。\n1、安装模块 这个模块内置在了nginx中，除非你安装中使用了\u0026ndash;without-http_access_module。如果你还没安装过nginx，那么请参考下ttlsa之前写的nginx安装.\n2、指令 allow 语法: allow address | CIDR | unix: | all; 默认值: — 配置段: http, server, location, limit_except\n允许某个ip或者一个ip段访问.如果指定unix:,那将允许socket的访问.注意：unix在1.5.1中新加入的功能，如果你的版本比这个低，请不要使用这个方法。\ndeny 语法: deny address | CIDR | unix: | all; 默认值: — 配置段: http, server, location, limit_except\n禁止某个ip或者一个ip段访问.如果指定unix:,那将禁止socket的访问.注意：unix在1.5.1中新加入的功能，如果你的版本比这个低，请不要使用这个方法。\nallow、deny实例 location / { deny 192.168.1.1; allow 192.168.1.0/24; allow 10.1.1.0/16; allow 2001:0db8::/32; deny all; }  从上到下的顺序，类似iptables。匹配到了便跳出。如上的例子先禁止了192.16.1.1，接下来允许了3个网段，其中包含了一个ipv6，最后未匹配的IP全部禁止访问. 在实际生产环境中，我们也会使用nginx 的geo模块配合使用，有兴趣的请参考ttlsa相关文章nginx geo使用方法.\nnginx访问控制模块要数nginx里面最简单的指令，只要记住你想禁止谁访问就deny加上IP，想允许则加上allow ip，想禁止或者允许所有，那么allow all或者deny all即可.\n但是具体的配置出现很多问题\n简单一点举例说明：\nip段：10.0.0.1-10.0.0.255 的表示方法：10.0.0.0/24\nip段：10.0.0.1-10.0.255.255 的表示方法：10.0.0.0/16\nip段：10.0.0.1-10.255.255.255 的表示方法：10.0.0.0/8\n"}),e.add({id:32,href:"/wiki/PHP/fpm%E4%BC%98%E5%8C%96/",title:"Fpm优化",section:"PHP",content:"php-fpm 优化 #  采用FastCGi 协议 多进程 fpm 常用配置\n error_log 错误日志 pm static|dynamic|ondemand (pm 模式) static ：提前生成所有的子进程 dynamic：子进程是动态分配的，随着请求量的变化而变化 ondemand ：直接摒弃 不用 pm.max_children 最大子进程数量 pm.start_servers 启动时的进程数量 默认为 min_spare_servers+(max_spare_servers-min_spare_servers)/2 pm.min_spare_servers 空闲时进程数量 pm.max_spare_servers 空闲时最大进程数量  优点：版本迭代可以不用重启 php进程\n缺点：执行效率差 一个请求就是一个子进程，进程对资源的开销很大。\n"}),e.add({id:33,href:"/wiki/PHP/function/excel-export/",title:"Excel Export",section:"PHP",content:"excel 导出 #  $PHPExcel = new PHPExcel(); //实例化PHPExcel类，类似于在桌面上新建一个Excel表格 $PHPSheet = $PHPExcel-\u0026gt;getActiveSheet(); //获得当前活动sheet的操作对象  $PHPSheet-\u0026gt;setTitle(\u0026#39;卡号\u0026#39;); //给当前活动sheet设置名称  $PHPSheet-\u0026gt;setCellValue(\u0026#39;A1\u0026#39;,\u0026#39;订单号\u0026#39;) -\u0026gt;setCellValue(\u0026#39;B1\u0026#39;,\u0026#39;手机号\u0026#39;) -\u0026gt;setCellValue(\u0026#39;C1\u0026#39;,\u0026#39;是否靓号\u0026#39;) -\u0026gt;setCellValue(\u0026#39;D1\u0026#39;,\u0026#39;是否虚拟号\u0026#39;) -\u0026gt;setCellValue(\u0026#39;E1\u0026#39;,\u0026#39;卡号等级\u0026#39;);   $order = D(\u0026#39;order\u0026#39;)-\u0026gt;select(); foreach ($order as $key =\u0026gt; $val){  }  $PHPSheet-\u0026gt;setCellValue(\u0026#39;A2\u0026#39;,\u0026#39;张三\u0026#39;)-\u0026gt;setCellValue(\u0026#39;B2\u0026#39;,\u0026#39;50\u0026#39;); //给当前活动sheet填充数据，数据填充是按顺序一行一行填充的，假如想给A1留空，可以直接setCellValue(‘A1’,’’); //$PHPSheet-\u0026gt;setCellValue(\u0026#39;A2\u0026#39;,\u0026#39;张三\u0026#39;)-\u0026gt;setCellValue(\u0026#39;B2\u0026#39;,\u0026#39;50\u0026#39;);  $PHPWriter = PHPExcel_IOFactory::createWriter($PHPExcel,\u0026#39;Excel2007\u0026#39;);//按照指定格式生成Excel文件，‘Excel2007’表示生成2007版本的xlsx，‘Excel5’表示生成2003版本Excel文件  header(\u0026#39;Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\u0026#39;);//告诉浏览器输出07Excel文件 //header(\u0026#39;Content-Type:application/vnd.ms-excel\u0026#39;);//告诉浏览器将要输出Excel03版本文件 header(\u0026#39;Content-Disposition: attachment;filename=\u0026#34;card_import_template.xlsx\u0026#34;\u0026#39;);//告诉浏览器输出浏览器名称 header(\u0026#39;Cache-Control: max-age=0\u0026#39;);//禁止缓存 $PHPWriter-\u0026gt;save(\u0026#34;php://output\u0026#34;); "}),e.add({id:34,href:"/wiki/PHP/function/%E5%AF%B9%E8%B1%A1%E4%B8%8E%E6%95%B0%E7%BB%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/",title:"对象与数组相互转换",section:"PHP",content:"数组转换成对象\nfunction array2object($array) { if (is_array($array)) { $obj = new StdClass(); foreach ($array as $key =\u0026gt; $val){ $obj-\u0026gt;$key = $val; } } else { $obj = $array; } return $obj; } 对象转换成数组\nfunction object2array($object) { if (is_object($object)) { foreach ($object as $key =\u0026gt; $value) { $array[$key] = $value; } } else { $array = $object; } return $array; } "}),e.add({id:35,href:"/wiki/PHP/function/%E5%B8%B8%E7%94%A8header/",title:"常用header",section:"PHP",content:"常用header\nheader(\u0026#39;HTTP/1.1 200 OK\u0026#39;); // ok 正常访问 header(\u0026#39;HTTP/1.1 404 Not Found\u0026#39;); //通知浏览器 页面不存在 header(\u0026#39;HTTP/1.1 301 Moved Permanently\u0026#39;); //设置地址被永久的重定向 301 header(\u0026#39;Location: http://www.ithhc.cn/\u0026#39;); //跳转到一个新的地址 header(\u0026#39;Refresh: 10; url=http://www.ithhc.cn/\u0026#39;); //延迟转向 也就是隔几秒跳转 header(\u0026#39;X-Powered-By: PHP/6.0.0\u0026#39;); //修改 X-Powered-By信息 header(\u0026#39;Content-language: en\u0026#39;); //文档语言 header(\u0026#39;Content-Length: 1234\u0026#39;); //设置内容长度 header(\u0026#39;Last-Modified: \u0026#39;.gmdate(\u0026#39;D, d M Y H:i:s\u0026#39;, $time).\u0026#39; GMT\u0026#39;); //告诉浏览器最后一次修改时间 header(\u0026#39;HTTP/1.1 304 Not Modified\u0026#39;); //告诉浏览器文档内容没有发生改变  ###内容类型### header(\u0026#39;Content-Type: text/html; charset=utf-8\u0026#39;); //网页编码 header(\u0026#39;Content-Type: text/plain\u0026#39;); //纯文本格式 header(\u0026#39;Content-Type: image/jpeg\u0026#39;); //JPG、JPEG header(\u0026#39;Content-Type: application/zip\u0026#39;); // ZIP文件 header(\u0026#39;Content-Type: application/pdf\u0026#39;); // PDF文件 header(\u0026#39;Content-Type: audio/mpeg\u0026#39;); // 音频文件 header(\u0026#39;Content-type: text/css\u0026#39;); //css文件 header(\u0026#39;Content-type: text/javascript\u0026#39;); //js文件 header(\u0026#39;Content-type: application/json\u0026#39;); //json header(\u0026#39;Content-type: application/pdf\u0026#39;); //pdf header(\u0026#39;Content-type: text/xml\u0026#39;); //xml header(\u0026#39;Content-Type: application/x-shockw**e-flash\u0026#39;); //Flash动画  ######  ###声明一个下载的文件### header(\u0026#39;Content-Type: application/octet-stream\u0026#39;); header(\u0026#39;Content-Disposition: attachment; filename=\u0026#34;ITblog.zip\u0026#34;\u0026#39;); header(\u0026#39;Content-Transfer-Encoding: binary\u0026#39;); readfile(\u0026#39;test.zip\u0026#39;); ######  ###对当前文档禁用缓存### header(\u0026#39;Cache-Control: no-cache, no-store, max-age=0, must-revalidate\u0026#39;); header(\u0026#39;Expires: Mon, 26 Jul 1997 05:00:00 GMT\u0026#39;); ######  ###显示一个需要验证的登陆对话框### header(\u0026#39;HTTP/1.1 401 Unauthorized\u0026#39;); header(\u0026#39;WWW-Authenticate: Basic realm=\u0026#34;Top Secret\u0026#34;\u0026#39;); ######   ###声明一个需要下载的xls文件### header(\u0026#39;Content-Disposition: attachment; filename=ithhc.xlsx\u0026#39;); header(\u0026#39;Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\u0026#39;); header(\u0026#39;Content-Length: \u0026#39;.filesize(\u0026#39;./test.xls\u0026#39;)); header(\u0026#39;Content-Transfer-Encoding: binary\u0026#39;); header(\u0026#39;Cache-Control: must-revalidate\u0026#39;); header(\u0026#39;Pragma: public\u0026#39;); readfile(\u0026#39;./test.xls\u0026#39;); ###### "}),e.add({id:36,href:"/wiki/Python/common-function/",title:"Common Function",section:"Python",content:"常用函数 #  # 判断类型 def typeof(variate):  type=None  if isinstance(variate,int):  type = \u0026#34;int\u0026#34;  elif isinstance(variate,str):  type = \u0026#34;str\u0026#34;  elif isinstance(variate,float):  type = \u0026#34;float\u0026#34;  elif isinstance(variate,list):  type = \u0026#34;list\u0026#34;  elif isinstance(variate,tuple):  type = \u0026#34;tuple\u0026#34;  elif isinstance(variate,dict):  type = \u0026#34;dict\u0026#34;  elif isinstance(variate,set):  type = \u0026#34;set\u0026#34;  return type "}),e.add({id:37,href:"/wiki/Python/queue/",title:"Queue",section:"Python",content:"Queue #  from queue import Queue\r#maxsize默认为0 ，不受限\r# 一旦\u0026gt;0,消息数又达到限制 q.put()也将阻塞\rq = Queue(maxsize=0)\r#阻塞程序，等待队列消息\rq.get()\r#获取消息，设置超时时间\rq.get(timeout=5.0)\r#发送消息\rq.put()\r#等待所有的消息都被消费完\rq.join()\r#查询当前队列的消息个数\rq.size()\r#队列消息是否被消费完 True/False\rq.empty()\r#检测队列里消息是否已满\rq.full() "}),e.add({id:38,href:"/wiki/Python/selenium/",title:"Selenium",section:"Python",content:"历史火狐浏览器版本下载 #   http://ftp.mozilla.org/pub/firefox/releases/\ngeckodriver下载地址 #   https://github.com/mozilla/geckodriver/releases\n"}),e.add({id:39,href:"/wiki/Python/tf-idf/",title:"Tf IDF",section:"Python",content:"nlp-qa-tfidf #   项目地址\n介绍 #  tfidf 余弦短文本求相似度\n用于 #  可用于QA问答式系统\npackage #  gensim jieba pandas\n软件架构 #  软件架构说明\n安装教程 #  可以直接通过 pip instsall nlp_tfidf 安装\n使用说明 #   运行qa文件 questionList 可替换文本集  "}),e.add({id:40,href:"/wiki/Python/threading/",title:"Threading",section:"Python",content:"threading #  关于线程方面\n常用函数（t= threading.Thread(target=func)）： t.start() #启动线程 t.join()#阻塞子线程 待 子线程结束后再往下进行 t.is_alive() \u0026amp; t.isAlive() #判断线程是否在执行状态，在执行状态返回 true 否则返回false t.daemon = true|false #设置线程是否随主线程退出而退出，默认为False t.name=“name”# 设置线程的名字 锁 #生成全局唯一锁 lock = threading.Lock() #获取锁,未获取到会阻塞程序 直到获取到锁 才会往下执行 lock.acquire() #释放锁， lock.release() 例：\n lock = threading.Lock() with lock : #业务 pass with 语句会在这个代码块执行前自动获取锁，在执行结束后自动释放锁  Event事件#通信机制 event = threading.Event() #重置event 使得所有该event事件都处于待命状态 event.clear() #等待接收event的指令 决定是否阻塞程序执行 event.wait() #发送event指令，使所有设置该event事件的线程执行 event.set()  http://python.jobbole.com/81546/\n"}),e.add({id:41,href:"/wiki/Python/uswgi%E4%B8%8Enginx/",title:"Uswgi与nginx",section:"Python",content:"python uwsgi 与nginx配置 #  nginx config #  server{  listen ***;  server_name domain;  charset utf-8;   location / {  include uwsgi_params;  uwsgi_pass 127.0.0.1:PORT;  uwsgi_param UWSGI_PYTHON /usr/bin/python3; // python 解释器 路径  uwsgi_param UWSGI_CHDIR /opt/dataV; // 项目目录  uwsgi_param UWSGI_SCRIPT run:app; // 项目的主程序  }  } uwsgi config #  [uwsgi] # 监听端口 socket = 127.0.0.1:PORT # 项目根目录 chdir = /opt/dataV # python 启动文件  wsgi-file = run.py # 程序内启用的application变量名 callable = app # 进程数量 process = 4 vacuum = true master = true "}),e.add({id:42,href:"/wiki/Python/%E6%95%B0%E6%8D%AE%E9%9B%86/",title:"数据集",section:"Python",content:"数据集 #  一些训练任务的数据集\n  数据堂 数据堂 是国内比较大的大数据交易平台，上面有许多数据覆盖面很广，但是要收费，推荐有财力的实验室采购。网址： http://www.datatang.com/\n  搜狗实验室 搜狗实验室是比较权威的数据提供方提供的数据质量很高而且数据是免费的。网址： http://www.sogou.com/labs/\n  自然语言处理与信息检索共享平台 是中科大的信息平台，上面有一些自然语言相关的数据集。网址： http://www.nlpir.org/?action-category-catid-28\n  聚数力 http://dataju.cn/Dataju/web/home\n  "}),e.add({id:43,href:"/wiki/Redis/%E5%BC%82%E6%AD%A5%E5%A4%8D%E5%88%B6/",title:"异步复制",section:"Redis",content:"master 不用配置\nslave slaveof IP PORT masterauth ***\n"}),e.add({id:44,href:"/wiki/Target/program/",title:"Program",section:"规划",content:"规划 #  规划分为两个个方面：工作、生活\n工作 #  1. 希望在目前的公司闲暇时刻学习更多地专业知识。 2. 当前在工作方面做得更多地是业务开发，那么希望多去深入的了解业务及市场需求，为以后的道路做铺垫。 3. 技术研发也是兴趣之一，喜欢钻研一些底层知识，希望自己能学习、储备更多地知识，形成自己的知识体系。 4. 工作中用到的一些知识点应该规划起来，形成一个自己的文档库方便查阅等。 生活 #  1. 每天健身。 2. 多去交一些同样领域的朋友及长辈。 3. 希望与家人或朋友每两周能出去旅游或游玩，扩展下视野，放松下自己，促进下感情。 4. 多练习英语文档阅读能力及口语能力。 "}),e.add({id:45,href:"/wiki/Target/target/",title:"Target",section:"规划",content:"目标 #   英语阅读及口语能力（循序渐进） 希望在两年内能够熟悉及慢慢使用k8s 提升对docker的理解及应用 DDD的的架构、思想深入的了解（已经在使用中，学习中） 多了解底层的知识，早日进大厂。再没进入前，还是多学习业务方面的，去发现业务市场等。  "}),e.add({id:46,href:"/wiki/VUE/iView%E6%A1%88%E4%BE%8B/",title:"I View案例",section:"VUE",content:"使用iView 开发的后台管理 #   链接\n"}),e.add({id:47,href:"/wiki/%E5%BE%AE%E6%9C%8D%E5%8A%A1/consul/",title:"Consul",section:"微服务",content:"常用的服务发现 #  consul：常用于go-micro mdns: go-micro 默认自带的服务发现 etcd: k8s内嵌的服务发现 zookeeper: java中比较常用\n简介 #  consul通过dns或者http接口使服务注册和服务发现变得很容易，一些外部服务，例如：saas提供的也可以一样注册\nConsul： #  服务发现：consul通过dns或者http接口使服务注册和服务发现变得很容易，一些外部服务，例如：saas提供的也可以一样注册 健康检查：健康检测使consul可以快速的告警在集群中的操作。和服务发现的集成，可以防止服务转发到故障服务上面。（监测机制） 键/值存储：一些配置等 多数据中心：无需复杂的配置，即可支持任意数量的区域（最好是三台或者三台以上的consul在运行）\n常用命令 #  consul agent\n -bind=0.0.0.0 指定consul 所在的机器IP地址。默认0.0.0.0 -http-port consul 自带的web访问的默认端口：8500 -client=127.0.0.1 表明哪些机器可以访问consul。默认本机。0.0.0.0所有机器均可访问 -config-dif=foo 所有主动注册服务的 描述信息 -data-dir=path 存储所有注册过来的server机器的详细信息。 -dev 开发者模式-node=hostname 服务发现的名字 -rejoin consul 启动的时候，加入到consul集群 -server 以服务方式开启consul,允许其他的consul连接到开启的consul上（形成集群）。如果不加-servr,表示以”客户端“的方式开启。不能被链接。 -ui 可以使用web界面来查看服务发现的详情  consul members：查看集群中有多少个成员\nconsul info: 查看当前consul他的ip等信息\nconsul leave： 优雅的关闭 consul。\n测试 #  consul agent -server -bootstrap-expect 1 -data-dir /tmp/consul -node=n1 -bind=0.0.0.0 -ui -rejoin -config-dir=/etc/consul.d/ -client 0.0.0.0 注册服务到consul步骤： #  1. 进入配置文件 /etc/consul.d/web.json\r2. 创建web.json文件\r3. 按json的语法，填写服务信息\r4. 重新启动consul consul agent -server -bootstrap-expect 1 -data-dir /tmp/consul -node=n1 -bind=0.0.0.0 -ui -rejoin -config-dir=/etc/consul.d/ -client 0.0.0.0\r5. 查看服务\r1. 浏览器查看\r2. curl -s 127.0.0.1:8500/v1/catalog/service/{servername}\r consul心跳检测 #  配置文件编写web.json(需重启)\n{\r\u0026#34;service\u0026#34;:{\r\u0026#34;name\u0026#34;: \u0026#34;sunkang\u0026#34;,\r\u0026#34;tags\u0026#34;: [\u0026#34;rails\u0026#34;],\r\u0026#34;port\u0026#34;: 9000,\r\u0026#34;check\u0026#34;: {\r\u0026#34;id\u0026#34;: \u0026#34;api\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;sunkang check\u0026#34;,\r\u0026#34;http\u0026#34;: \u0026#34;http://localhost:9000\u0026#34;,\r\u0026#34;interval\u0026#34;: \u0026#34;10s\u0026#34;,\r\u0026#34;timeout\u0026#34;: \u0026#34;1s\u0026#34;\r}\r}\r} 使用浏览器查看服务的健康状态 除了http实现健康检查外，还可以使用“脚本”、“tcp”、“ttl”方式进行健康检查。\n"})})()