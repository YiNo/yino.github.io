<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>简介 on sun17 wiki</title><link>https://kangkang17.cn/</link><description>Recent content in 简介 on sun17 wiki</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://kangkang17.cn/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a New Theme</title><link>https://kangkang17.cn/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/posts/creating-a-new-theme/</guid><description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://kangkang17.cn/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/posts/migrate-from-jekyll/</guid><description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>(Hu)go Template Primer</title><link>https://kangkang17.cn/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>https://kangkang17.cn/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:</description></item><item><title/><link>https://kangkang17.cn/menu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/menu/</guid><description>语言
Golang
go-laravel 垃圾回收 Go并发原理及GPM调度策略 常用函数库 百万聊天系统架构 Python
selenium uswgi与nginx 数据集 COMMON函数 threading queue tf-idf 文本分类 PHP
fpm优化 excel导出 对象与数组相互转换 VUE
iView案例 数据库
MySql
事务隔离级别 mysql异步复制 创建函数 忘记密码 创建用户并授权 常见函数 Redis
异步复制 Mango WebServer
Nginx</description></item><item><title/><link>https://kangkang17.cn/wiki/DDD/domain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/DDD/domain/</guid><description> domain 实体 （model） a. 唯一要素（必须有唯一标识）
b. 实体只能通过唯一标识来判断两者是否想同
值对象 实体的额外信息
a. 值对象 只能通过值判断两者是否相同 用来描述用户的额外信息
聚合 a. 包括一组领域对象（包括实体和值对象），完整描述一个领域业务，其中必然有个根实体。这个叫做聚合根。
i. 例： 比如用户登录这个聚合，用户实体就是聚合根（包含了各个值对象）
ii. 例： 用户日志功能。其中用户日志包含了，用户登录日志，用户购买日志，用户充值日志。 这三个聚合。用户实体都是他们的聚合根。
b. 聚合和聚合之间可以相互引用但是 是根之间相互引用
仓储 （repository）：为每一个聚合根实体创建一个仓储接口，并且不和底层数据库交互。作用：更好的把我们的精力集中在领域逻辑上 ()
DTO 数据传输对象 http 响应字段</description></item><item><title/><link>https://kangkang17.cn/wiki/DDD/PO-DO-VO-DTO/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/DDD/PO-DO-VO-DTO/</guid><description>VO（View Object）：视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。 用户提交的数据 req
DTO（Data Transfer Object）：数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。将VO转换为服务(DO)所需要的参数.
DO（Domain Object）：领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。
PO（Persistent Object）：持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。
VO与DTO的区别
大家可能会有个疑问（在笔者参与的项目中，很多程序员也有相同的疑惑）：既然DTO是展示层与服务层之间传递数据的对象，为什么还需要一个VO呢？对！对于绝大部分的应用场景来说，DTO和VO的属性值基本是一致的，而且他们通常都是POJO，因此没必要多此一举，但不要忘记这是实现层面的思维，对于设计层面来说，概念上还是应该存在VO和DTO，因为两者有着本质的区别，DTO代表服务层需要接收的数据和返回的数据，而VO代表展示层需要显示的数据。 用一个例子来说明可能会比较容易理解：例如服务层有一个getUser的方法返回一个系统用户，其中有一个属性是gender(性别)，对于服务层来说，它只从语义上定义：1-男性，2-女性，0-未指定，而对于展示层来说，它可能需要用“帅哥”代表男性，用“美女”代表女性，用“秘密”代表未指定。说到这里，可能你还会反驳，在服务层直接就返回“帅哥美女”不就行了吗？对于大部分应用来说，这不是问题，但设想一下，如果需求允许客户可以定制风格，而不同风格对于“性别”的表现方式不一样，又或者这个服务同时供多个客户端使用（不同门户），而不同的客户端对于表现层的要求有所不同，那么，问题就来了。再者，回到设计层面上分析，从职责单一原则来看，服务层只负责业务，与具体的表现形式无关，因此，它返回的DTO，不应该出现与表现形式的耦合。 理论归理论，这到底还是分析设计层面的思维，是否在实现层面必须这样做呢？一刀切的做法往往会得不偿失，下面我马上会分析应用中如何做出正确的选择。</description></item><item><title/><link>https://kangkang17.cn/wiki/DDD/%E5%AE%9E%E8%B7%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/DDD/%E5%AE%9E%E8%B7%B5/</guid><description>项目地址 项目简介 此项目是打造一个nlp的开源平台，并提供相应的api；用户可根据自己的应用场景去选择相应的模型，同时用户可以根据自己的数据去训练，达到更高的效果。
现有以下几种场景：
1. QA（问答系统）根据用户输入的问题，去自己的训练库中咨询查找匹配的问题。 2. 文本纠错。 3. 闲聊对话，根据用户输入的文本，去系统文本库中匹配文本，达到一个与用户交互的模式。 欢迎大佬一起参与！
架构 nlp-template VUE开发模板
nlp-controller golang开发上层业务
nlp-model py开发 模型
nlp-controller 项目架构 项目采用DDD(Domain Driven Design)架构，
nlp-controller ├── application ├── domain │ ├── aggregate │ │ └── qa_question_factory.go │ ├── entity │ │ │── qa_question.go │ │ └── user.go │ ├── event │ ├── po │ │ │── user.go │ │ │── user_ak.go │ │ └── qa_question.</description></item><item><title/><link>https://kangkang17.cn/wiki/DDD/%E6%AD%A5%E9%AA%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/DDD/%E6%AD%A5%E9%AA%A4/</guid><description>步骤 1. 需求分析（统一语言：比如PPT、原型图 需统一！） 2. 领域分析 3. 领域边界划分 4. 领域建模 5. 核心业务逻辑 6. 技术细节 Domain StoryTelling Pictograms and VOcabulary 1. Actors - 角色参与者故事场景参与者 2. WorkObjects - 参与者与参与者传递的信息 3. Activities - 关系 Actors 与 WorkObjects 关系 4. Annotations - 解释 Domain Design 1. DDD a. Bounded Context - 界限上下文 b. Aggregate - 聚合根 c. Entities - 实体 i. 唯一标识 ii. 有状态 iii. 例如订单实体 d. Value Object - 值对象 i. 无实体 ii. 例如订单中的 address 改变并不会影响订单 e.</description></item><item><title/><link>https://kangkang17.cn/wiki/DDD/%E7%A4%BA%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/DDD/%E7%A4%BA%E4%BE%8B/</guid><description>电商领域： 核心领域 销售
支撑子域 除去销售外的其他子域
通用子域 比如：通知（短信等）
界限上下文
目的：控制边界
领域模型
先抽象领域
领域：反应业务上需要解决的问题
四层架构
interface 用户展示层
application 应用层 协调工作层
domain 领域层 业务规则
基础设施层 mysql中间件等
拆分 微服务设计原则
1. 要领域驱动设计，而不是数据驱动设计，也不是界面驱动设计
2. 要边界清晰的微服务。而不是泥球
3. 要职能清晰的分层，而不是什么都放一起
4. 不能过度拆分</description></item><item><title/><link>https://kangkang17.cn/wiki/DDD/%E8%81%9A%E5%90%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/DDD/%E8%81%9A%E5%90%88/</guid><description>什么是聚合？ Aggregate就是一组相关对象的的集合，我们把它作为数据修改和访问的单元。
聚合关系 （核心两点） 若一个个体在整体没有创建之前就已经存在，则不是聚合。
若一个个体消亡了，与这个个体相关的，同时消亡则就是聚合。
例子 1. 如果一个客户消亡，则客户的联系方式、多张银行卡信息将不再有任何意义 2. 如果一张采购订单取消，则采购订单的商品明细则没有任何存在的意义。 3. 医生与处方：若医生不存在了，处方依旧有效，若处方不存在了，医生依旧有效；所以两者不是聚合； 4. 处方与药品明细（处方明细）： 若处方不存在则处方对应的药品明细就没有实际的作用。因此两者是聚合；</description></item><item><title/><link>https://kangkang17.cn/wiki/Docker/docker-compose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/Docker/docker-compose/</guid><description/></item><item><title/><link>https://kangkang17.cn/wiki/Docker/Dockerfile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/Docker/Dockerfile/</guid><description/></item><item><title/><link>https://kangkang17.cn/wiki/Docker/nginx-php-mysql%E4%B8%80%E4%BB%B6%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/Docker/nginx-php-mysql%E4%B8%80%E4%BB%B6%E9%83%A8%E7%BD%B2/</guid><description>nginx-php-mysql nginx php mysql 一件部署
目录结构 config.d --nginx 配置文件地址 编写vhost php/conf -- php 配置文件地址 www -- 将自己的代码部署到 www目录下 mysql/conf -- mysql配置文件 mysql/data -- mysql数据文件 mysql/logs -- mysql log文件</description></item><item><title/><link>https://kangkang17.cn/wiki/Docker/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/Docker/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>docker
docker run -it --rm ubuntu:16.04 /bin/bash # 使用shell 脚本 ## 将指令输出到控制台 docker run ubuntu:16.04 /bin/sh -c &amp;#34;while true;do echo hello world;sleep 1; done&amp;#34; ## 后台运行 docker run -d ubuntu:16.04 /bin/sh -c &amp;#34;while true;do echo hello world;sleep 1; done&amp;#34; docker build -t xxxx:xxxx . docker-compose
docker-compose up . docker-compose restart</description></item><item><title/><link>https://kangkang17.cn/wiki/go/go-laravel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/go/go-laravel/</guid><description>Golang-Laravel 模仿PHP-Laravel，开箱即用、go语言版的laravel，phper转Go开发 可以立马上手~
package gin gorm go-redis go laravel 支持功能 路由 中间件 路由中间件 控制器 模型 验证器（*默认是英文，将其翻译为中文） 目录结构 与laravel几乎一模一样
app 应用目录
|---- exception 返回http状态及异常接收
|----|---- baseException.go panic异常接收文件
|---- http web核心目录
|----|---- controller 控制器存放目录
|----|---- middleware 路由中间件存放目录
|---- models 模型存放目录
|---- service 业务编写目录
|---- validate 验证器目录
|---- helpers.go 常用函数文件
config
|----|----app.go 应用配置 如：ip、port等
|----|----databases.go 数据库配置
extend 自定义扩展包
|----|---- log 自定义日志package(与系统log相同，增加按小时分割日志)
routes 路由文件夹
|----|---- route.go 路由控制目录
|----|---- .</description></item><item><title/><link>https://kangkang17.cn/wiki/go/Go%E5%B9%B6%E5%8F%91%E5%8E%9F%E7%90%86%E5%8F%8AGPM%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/go/Go%E5%B9%B6%E5%8F%91%E5%8E%9F%E7%90%86%E5%8F%8AGPM%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A5/</guid><description>并发&amp;amp;并行 Go应该是在内核级现成的基础上做了一层l逻辑上的虚拟线程（用户级线程）+ 线程调度系统  假如我们有一段CPU密集型任务 我们创建2000个goroutine 是否真的将性能提高2000倍，其实并不能； 我们只是进行2000并发（concurrenc） 而并没有真正做到并行（parallelism）。 并发是指我们的程序执行逻辑，传统单线程应用的程序逻辑是顺序执行的，在任何时刻，程序只能处理同一个逻辑，而并发是指，我们同时执行多个独立的程序逻辑，若干个程序逻辑在执行时可以是同时进行的（但不代表同时进行处理 其实还是一次处理一个）。实际上，不论我们并发多少个程序逻辑，若我们仅仅运行在一个单核单线程的CPU上，都不能让你的程序在性能上有所提升，因为最终所有任务都排队等待CPU资源（时间片）. 而并行才能让我们的程序真正的同时处理多个任务，但并行并不是编程语言能够带我们的特性，他需要硬件支持。上面说到单核CPU所有资源都要等待同一个CPU的资源，那么其实我们只要将CPU增多就能真正的让我们实现并行。我们可以使用多核CPU或用多台服务器组成服务集群，均可实现真正的并行，能够并行处理的任务数量也就是我们的CPU数量。
CPU密集&amp;amp;I/O密集  如果我们的程序是CPU密集型（计算型，深度学习等），使用并发编程，可能确实无法提升我们程序的性能，甚至有可能会下降，创建线程等也是会消耗资源的。 如果我们的程序是I/O密集型，当你在进行程序压测时CPU可能很低，但性能却到了瓶颈，原因时大部分时间都浪费在了等待I/O的过程中；如果我们在等待I/O的同时继续去执行其他的程序逻辑即可提高CPUl利用率，从而提高程序的性能，这就是并发编程的优点；例如Python因为GIL的存在实际上并不能实现真正的并行，但他的多线程依旧在IO密集型的程序中依旧有种很重要的意义；（遇到I/O操作 则切换线程；单线程+ 协程可能更优；减少了切换线程的开销）；
Goroutine（Golang Coroutine）  使用多核CPU实现并行处理，使应用在多核cpu实现并行处理的方案主要是多进程与多线程两种方式，多进程模型相对简单，但是有着资源开销大及进程间通信成本高的问题。多线程模型相对复杂，会有死锁，线程安全，模型复杂等问题，但却因为资源开销及易于管理等优点适用于对于性能要求较高的应用。 Golang采用的是多线程模型，更详细的说他是一个两级线程模型，但它对系统线程（内核级线程）进行了封装，暴露了一个轻量级的协程goroutine（用户级线程）供用户使用，而用户级线程到内核级线程的调度由golang的runtime负责，调度逻辑对外透明。 goroutine的优势在于上下文切换在完全用户态进行，无需像线程一样频繁在用户态与内核态之间切换，节约了资源消耗。
G·P·M G（Goroutine） ：我们所说的协程，为用户级的轻量级线程，每个Goroutine对象中的sched保存着其上下文信息
M（Machine） ：对内核级线程的封装，数量对应真实的CPU数（真正干活的对象）、系统的
P（Processor） ：即为G和M的调度对象，用来调度G和M之间的关联关系，其数量可通过GOMAXPROCS()来设置，默认为核心数 他代表了真正的并发度，即有多少个goroutine可以同时运行</description></item><item><title/><link>https://kangkang17.cn/wiki/go/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/go/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid><description>垃圾回收 概述 GC &amp;amp; RC 垃圾回收的由来 逃逸分析的由来 垃圾回收，怎么实现？ 什么样的是垃圾？ 怎么把垃圾找出来？ 内存屏障 概述 现代编程语言一般都有垃圾回收功能。这个能极大的减轻程序员的负担，并且减少大部分场景的问题。
GC &amp;amp; RC RC: 引用计数管理内存的方式 1. 使用前，为了保护对象不被销毁，计数 +1 2. 使用完后，计数 -1，计数减到 0 之后，就可以安全销毁了 GC: 垃圾回收管理内存的方式
golang 的垃圾回收我们经常听到三色标记法，三色指的是白色，灰色，黑色，分别表示三种状态，至于三色标记法的理论此处不表，我们从简单的理解切入。
怎么把垃圾找出来？ 方法：从根处扫描，把所有的根扫描完，每个根扫描到底。按照之前的三色标记来说，扫描完了的是黑色，正在扫描的是灰色的，没扫描的是白色的。根扫描完了，那么最后只会剩下两种颜色的，黑色，白色。白色就是没用的垃圾，这种清理掉就没事。
根：栈，是扫描的起点，还有一些全局变量也是根，是起点
所谓的垃圾只对于堆上来说。栈上内存是编译器管理的，堆上内存是业务分配，垃圾回收器回收
垃圾怎么回收？怎么有效安全的回收？ 起初的是最简单的思路STW(stop the world)，暂停所有程序，等待垃圾回收完再运行程序。当然这种模式在生产中不合适后又优化为 扫描-标记-清除</description></item><item><title/><link>https://kangkang17.cn/wiki/go/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/go/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%BA%93/</guid><description>Golang-common 安装 go get github.com/yino/common InArray 判断对象是否在 array 中 返回 bool
ArraySearch 判断对象是否在 array 中 返回 int, bool (false 则不存在)
MapSearch 判断对象是否在 map 中 返回interface, bool (false 则不存在)</description></item><item><title/><link>https://kangkang17.cn/wiki/Linux/CentOS%E6%90%AD%E5%BB%BAShadowsocks%E6%9C%8D%E5%8A%A1%E7%AB%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/Linux/CentOS%E6%90%AD%E5%BB%BAShadowsocks%E6%9C%8D%E5%8A%A1%E7%AB%AF/</guid><description>CentOS搭建Shadowsocks服务端 最新方法： 1.安装 直接依次执行下列命令：
yum install python-setuptools easy_install pip pip install shadowsocks 即可完成Shadowsocks服务端安装。 2、配置 新建/etc/shadowsocks.json文件，内容如下
{ &amp;#34;server&amp;#34;:&amp;#34;服务器IP&amp;#34;, &amp;#34;server_port&amp;#34;:8388, &amp;#34;local_address&amp;#34;: &amp;#34;127.0.0.1&amp;#34;, &amp;#34;local_port&amp;#34;:1080, &amp;#34;password&amp;#34;:&amp;#34;密码&amp;#34;, &amp;#34;timeout&amp;#34;:300, &amp;#34;method&amp;#34;:&amp;#34;aes-256-cfb&amp;#34;, &amp;#34;fast_open&amp;#34;: false } 3、运行 前台运行(Ctrl+C或者关闭终端服务会自动停止)：
ssserver -c /etc/shadowsocks.json 后台运行(推荐，关闭终端后服务会继续运行)： ssserver -c /etc/shadowsocks.json -d start ssserver -c /etc/shadowsocks.json -d stop</description></item><item><title/><link>https://kangkang17.cn/wiki/Linux/%E5%88%86%E7%BB%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/Linux/%E5%88%86%E7%BB%84/</guid><description>用户分组 场景， 比如刚下载docker、nginx等一些应用时，使用 sudo下载，则当前用户没有权限去操作此应用
# 查看分组 cat /etc/group # 查看当前用户 $USER #将当前用户添加到 分组中 xxx代表分组 sudo gpasswd -a $USER xxx # 切换到xxx分组 xxx 代表分组 newgrp xxx</description></item><item><title/><link>https://kangkang17.cn/wiki/Linux/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/Linux/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>防火墙
# 模拟socketserver端 nc -l 127.0.0.1 8800 #共享linux命令行 tmux #开启防火墙 ufw enable # 置顶ip访问置顶端口 ufw allow from xx.xx.xx.xx to any port 22 #查看所有磁盘是用百分比 df -h #查看具体文件大小 du -sh /* --exclude proc #后台挂载 nohup php7.0 run.php &amp;gt;&amp;gt; run.log 2&amp;gt;&amp;amp;1 &amp;amp; #修改默认编辑器 select-editor #抓包 tcpdump -i eth0 udp tcpdump -i eth0 udp port 12345 # sftp useradd -d /var/www/html/www.xxx.com -m xxx passwd xxx chown -R xxx:xxx /var/www/html/www.xxx.com chmod -R 744 /var/www/html/www.xxx.com</description></item><item><title/><link>https://kangkang17.cn/wiki/MySql/mysql%E5%BC%82%E6%AD%A5%E5%A4%8D%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/MySql/mysql%E5%BC%82%E6%AD%A5%E5%A4%8D%E5%88%B6/</guid><description>#master
配置文件开启(master) server-id = 1 log_bin = /var/log/mysql/mysql-bin.log expire_logs_days = 10 max_binlog_size = 100M #创建用户 并赋予复制权限（master） create user &amp;#39;test&amp;#39;@&amp;#39;192.168.0.%&amp;#39; identified by &amp;#39;&amp;#39;; grant replication slave on *.* to &amp;#39;test&amp;#39;@&amp;#39;192.168.0.%&amp;#39;; flush privileges; #刷新权限 show master status; #查看master状态 binlog日志，position 导出master 数据 mysqldump --single-transaction --master-data=2 --triggers --routines --all-databases -uroot -p &amp;gt; all.sql #slave
将all.sql 复制到slave 服务上 scp all.sql user@ip:/var/log/mysql 导入 master 数据 mysql -uroot -p&amp;lt; all.sql 修改与master的链接 change master to master_host = &amp;#39;192.168.1.1200&amp;#39;, master_user=&amp;#39;dba&amp;#39;， master_password=&amp;#39;123456&amp;#39;, master_log_file = &amp;#39;master-bin.</description></item><item><title/><link>https://kangkang17.cn/wiki/MySql/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/MySql/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</guid><description>事务的隔离级别 READ-UNCOMMITTED 可以读取事务未提交的数据；
若新增或修改的数据 在事务中 但是事务没有提交时
在其他事务中是能看到此次提交或修改后的数据。
A事务　插入数据　未提交
B事务　可以查看到A　事务中的插入数据
READ-COMMITTED 读取已经提交的数据；
只能看到提交后的数据。未提交的看不到。
A事务插入数据　未提交
B事务读取数据　不会读取到未提交事务的数据
REPEATABLE READ mysql 默认的事务隔离级别；他确保同一事务的多个实例在并发读取时，会看到同样的数据行；
比如A，B开启事务
A执行ｓｅｌｅｃｔ
B执行　ｉｎｓｅｒｔ　提交
A再次执行　ｓｅｌｅｃｔ时　依旧看不到B插入的数据；
当A要插入重复数据时（有主键或者唯一索引限制时），则插入失败，因为数据已存在，只是在A事件中看不到；
４. Serializable 事务最高的隔离级别，这个就比较狠了，并发下不适合使用，容易造成大量的阻塞；
例子（操作同一张表）：
１）
A开启事务　执行插入语句未提交；
B执行清空表　则阻塞，A不提交B一直阻塞，等待A的事务完成；
２）
A开启事务　执行写操作时，未提交；
B开启事务　执行任何操作　全部阻塞等待A事务的提交完成；
C等待Ｂ．．．．序列化的等待；</description></item><item><title/><link>https://kangkang17.cn/wiki/MySql/%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/MySql/%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0/</guid><description>创建函数
CREATE DEFINER=`location`@`%` PROCEDURE `create_slave_tract`() BEGIN declare str_date varchar(16); SET str_date = date_format(now(),&amp;#34;%Y%m%d&amp;#34;); SET @sqlcmd2 = concat(&amp;#39;create table tb_slave_track_&amp;#39;,str_date,&amp;#34;(`id` int(10) NOT NULL AUTO_INCREMENT, `longitude` char(60) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `latitude` char(60) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `create_time` datetime(0) NULL DEFAULT NULL, `slave_id` int(11) NULL DEFAULT NULL, `code` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `electric_quantity` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `speed` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `elevation` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `pose` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `ip` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `port` int(10) NULL DEFAULT NULL, `frequency` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `signal` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `IMSI` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `type` TINYINT(1) NULL DEFAULT NULL, PRIMARY KEY (`id`) USING BTREE )&amp;#34;); PREPARE p2 FROM @sqlcmd2; EXECUTE p2; DEALLOCATE PREPARE p2; END</description></item><item><title/><link>https://kangkang17.cn/wiki/MySql/%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%B9%B6%E6%8E%88%E6%9D%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/MySql/%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%B9%B6%E6%8E%88%E6%9D%83/</guid><description>创建用户及密码及授权 //创建用户 create user &amp;#39;username&amp;#39;@&amp;#39;ip&amp;#39; identified by &amp;#39;password&amp;#39;; //授权 (备注) grant all(select,insert,update,delete) on databasesname.tablename(*) to &amp;#39;username&amp;#39;@&amp;#39;ip&amp;#39;;</description></item><item><title/><link>https://kangkang17.cn/wiki/MySql/%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/MySql/%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/</guid><description>常用函数 inet_aton() inet_ntoa() // 举例: INSERT INTO sessions(ipaddress) VALUES(INET_ATON(&amp;#39;192.168.0.1&amp;#39;)); select INET_NTOA(ipaddress) from sessions;</description></item><item><title/><link>https://kangkang17.cn/wiki/MySql/%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/MySql/%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/</guid><description>忘记密码 mysql配置文件下增加 可跳过密码登录 然后 再去修改root密码就好: &amp;ndash;skip-grant-tables</description></item><item><title/><link>https://kangkang17.cn/wiki/Nginx/rewrite%E4%B8%8Eproxy_pass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/Nginx/rewrite%E4%B8%8Eproxy_pass/</guid><description>rewrite 与 proxy_pass rewrite 如果正则表达式（regex）匹配到了请求的URI（request URI），这个URI会被后面的replacement替换 rewrite的定向会根据他们在配置文件中出现的顺序依次执行 通过使用flag可以终止定向后进一步的处理 如果replacement以“http://”, “https://”, or “$scheme”开头，处理将会终止，请求结果会以重定向的形式返回给客户端（client） 如果replacement字符串里有新的request参数，那么之前的参数会附加到其后面，如果要避免这种情况，那就在replacement字符串后面加上“？”，eg： rewrite相当于是重定向到了目标网站，浏览器会跳转到目标网站 rewrite ^/users/(.*)$ /?user=$1? last;= proxy_pass 不影响浏览器地址栏的url 设置被代理server的协议和地址，URI可选（可以有，也可以没有） 协议可以为http或https 地址可以为域名或者IP，端口可选；eg： proxy_pass http://localhost:8000/uri/; 如果proxy_pass的URL定向里包括URI，那么请求中匹配到location中URI的部分会被proxy_pass后面URL中的URI替换，eg： location /name/ { proxy_pass http://127.0.0.1/remote/; } 请求http://example.com/name/test.html 会被代理到http://127.0.0.1/remote/test.html 如果proxy_pass的URL定向里不包括URI，那么请求中的URI会保持原样传送给后端server，eg： location /name/ { proxy_pass http://127.0.0.1; } 请求http://example/name/test.html 会被代理到http://127.0.0.1/name/test.html</description></item><item><title/><link>https://kangkang17.cn/wiki/Nginx/%E7%A6%81%E7%BD%91%E6%AE%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/Nginx/%E7%A6%81%E7%BD%91%E6%AE%B5/</guid><description>nginx 禁网段 单看nginx模块名ngx_http_access_module,很多人一定很陌生，但是deny和allow相比没一个人不知道的，实际上deny和allow指令属于ngx_http_access_module.我们想控制某个uri或者一个路径不让人访问，在nginx就得靠它了。
nginx的访问控制模块语法很简单，至少比apache好理解，apache的allow和deny的顺序让很多初学者抓头.好了具体看下这个插件的使用方法吧。
1、安装模块 这个模块内置在了nginx中，除非你安装中使用了&amp;ndash;without-http_access_module。如果你还没安装过nginx，那么请参考下ttlsa之前写的nginx安装.
2、指令 allow 语法: allow address | CIDR | unix: | all; 默认值: — 配置段: http, server, location, limit_except
允许某个ip或者一个ip段访问.如果指定unix:,那将允许socket的访问.注意：unix在1.5.1中新加入的功能，如果你的版本比这个低，请不要使用这个方法。
deny 语法: deny address | CIDR | unix: | all; 默认值: — 配置段: http, server, location, limit_except
禁止某个ip或者一个ip段访问.如果指定unix:,那将禁止socket的访问.注意：unix在1.5.1中新加入的功能，如果你的版本比这个低，请不要使用这个方法。
allow、deny实例 location / { deny 192.168.1.1; allow 192.168.1.0/24; allow 10.1.1.0/16; allow 2001:0db8::/32; deny all; } 从上到下的顺序，类似iptables。匹配到了便跳出。如上的例子先禁止了192.16.1.1，接下来允许了3个网段，其中包含了一个ipv6，最后未匹配的IP全部禁止访问. 在实际生产环境中，我们也会使用nginx 的geo模块配合使用，有兴趣的请参考ttlsa相关文章nginx geo使用方法.
nginx访问控制模块要数nginx里面最简单的指令，只要记住你想禁止谁访问就deny加上IP，想允许则加上allow ip，想禁止或者允许所有，那么allow all或者deny all即可.
但是具体的配置出现很多问题
简单一点举例说明：
ip段：10.0.0.1-10.0.0.255 的表示方法：10.</description></item><item><title/><link>https://kangkang17.cn/wiki/PHP/fpm%E4%BC%98%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/PHP/fpm%E4%BC%98%E5%8C%96/</guid><description>php-fpm 优化 采用FastCGi 协议 多进程 fpm 常用配置
error_log 错误日志 pm static|dynamic|ondemand (pm 模式) static ：提前生成所有的子进程 dynamic：子进程是动态分配的，随着请求量的变化而变化 ondemand ：直接摒弃 不用 pm.max_children 最大子进程数量 pm.start_servers 启动时的进程数量 默认为 min_spare_servers+(max_spare_servers-min_spare_servers)/2 pm.min_spare_servers 空闲时进程数量 pm.max_spare_servers 空闲时最大进程数量 优点：版本迭代可以不用重启 php进程
缺点：执行效率差 一个请求就是一个子进程，进程对资源的开销很大。</description></item><item><title/><link>https://kangkang17.cn/wiki/PHP/function/excel-export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/PHP/function/excel-export/</guid><description>excel 导出 $PHPExcel = new PHPExcel(); //实例化PHPExcel类，类似于在桌面上新建一个Excel表格 $PHPSheet = $PHPExcel-&amp;gt;getActiveSheet(); //获得当前活动sheet的操作对象 $PHPSheet-&amp;gt;setTitle(&amp;#39;卡号&amp;#39;); //给当前活动sheet设置名称 $PHPSheet-&amp;gt;setCellValue(&amp;#39;A1&amp;#39;,&amp;#39;订单号&amp;#39;) -&amp;gt;setCellValue(&amp;#39;B1&amp;#39;,&amp;#39;手机号&amp;#39;) -&amp;gt;setCellValue(&amp;#39;C1&amp;#39;,&amp;#39;是否靓号&amp;#39;) -&amp;gt;setCellValue(&amp;#39;D1&amp;#39;,&amp;#39;是否虚拟号&amp;#39;) -&amp;gt;setCellValue(&amp;#39;E1&amp;#39;,&amp;#39;卡号等级&amp;#39;); $order = D(&amp;#39;order&amp;#39;)-&amp;gt;select(); foreach ($order as $key =&amp;gt; $val){ } $PHPSheet-&amp;gt;setCellValue(&amp;#39;A2&amp;#39;,&amp;#39;张三&amp;#39;)-&amp;gt;setCellValue(&amp;#39;B2&amp;#39;,&amp;#39;50&amp;#39;); //给当前活动sheet填充数据，数据填充是按顺序一行一行填充的，假如想给A1留空，可以直接setCellValue(‘A1’,’’); //$PHPSheet-&amp;gt;setCellValue(&amp;#39;A2&amp;#39;,&amp;#39;张三&amp;#39;)-&amp;gt;setCellValue(&amp;#39;B2&amp;#39;,&amp;#39;50&amp;#39;); $PHPWriter = PHPExcel_IOFactory::createWriter($PHPExcel,&amp;#39;Excel2007&amp;#39;);//按照指定格式生成Excel文件，‘Excel2007’表示生成2007版本的xlsx，‘Excel5’表示生成2003版本Excel文件 header(&amp;#39;Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&amp;#39;);//告诉浏览器输出07Excel文件 //header(&amp;#39;Content-Type:application/vnd.ms-excel&amp;#39;);//告诉浏览器将要输出Excel03版本文件 header(&amp;#39;Content-Disposition: attachment;filename=&amp;#34;card_import_template.xlsx&amp;#34;&amp;#39;);//告诉浏览器输出浏览器名称 header(&amp;#39;Cache-Control: max-age=0&amp;#39;);//禁止缓存 $PHPWriter-&amp;gt;save(&amp;#34;php://output&amp;#34;);</description></item><item><title/><link>https://kangkang17.cn/wiki/PHP/function/%E5%AF%B9%E8%B1%A1%E4%B8%8E%E6%95%B0%E7%BB%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/PHP/function/%E5%AF%B9%E8%B1%A1%E4%B8%8E%E6%95%B0%E7%BB%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</guid><description>数组转换成对象
function array2object($array) { if (is_array($array)) { $obj = new StdClass(); foreach ($array as $key =&amp;gt; $val){ $obj-&amp;gt;$key = $val; } } else { $obj = $array; } return $obj; } 对象转换成数组
function object2array($object) { if (is_object($object)) { foreach ($object as $key =&amp;gt; $value) { $array[$key] = $value; } } else { $array = $object; } return $array; }</description></item><item><title/><link>https://kangkang17.cn/wiki/PHP/function/%E5%B8%B8%E7%94%A8header/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/PHP/function/%E5%B8%B8%E7%94%A8header/</guid><description>常用header
header(&amp;#39;HTTP/1.1 200 OK&amp;#39;); // ok 正常访问 header(&amp;#39;HTTP/1.1 404 Not Found&amp;#39;); //通知浏览器 页面不存在 header(&amp;#39;HTTP/1.1 301 Moved Permanently&amp;#39;); //设置地址被永久的重定向 301 header(&amp;#39;Location: http://www.ithhc.cn/&amp;#39;); //跳转到一个新的地址 header(&amp;#39;Refresh: 10; url=http://www.ithhc.cn/&amp;#39;); //延迟转向 也就是隔几秒跳转 header(&amp;#39;X-Powered-By: PHP/6.0.0&amp;#39;); //修改 X-Powered-By信息 header(&amp;#39;Content-language: en&amp;#39;); //文档语言 header(&amp;#39;Content-Length: 1234&amp;#39;); //设置内容长度 header(&amp;#39;Last-Modified: &amp;#39;.gmdate(&amp;#39;D, d M Y H:i:s&amp;#39;, $time).&amp;#39; GMT&amp;#39;); //告诉浏览器最后一次修改时间 header(&amp;#39;HTTP/1.1 304 Not Modified&amp;#39;); //告诉浏览器文档内容没有发生改变 ###内容类型### header(&amp;#39;Content-Type: text/html; charset=utf-8&amp;#39;); //网页编码 header(&amp;#39;Content-Type: text/plain&amp;#39;); //纯文本格式 header(&amp;#39;Content-Type: image/jpeg&amp;#39;); //JPG、JPEG header(&amp;#39;Content-Type: application/zip&amp;#39;); // ZIP文件 header(&amp;#39;Content-Type: application/pdf&amp;#39;); // PDF文件 header(&amp;#39;Content-Type: audio/mpeg&amp;#39;); // 音频文件 header(&amp;#39;Content-type: text/css&amp;#39;); //css文件 header(&amp;#39;Content-type: text/javascript&amp;#39;); //js文件 header(&amp;#39;Content-type: application/json&amp;#39;); //json header(&amp;#39;Content-type: application/pdf&amp;#39;); //pdf header(&amp;#39;Content-type: text/xml&amp;#39;); //xml header(&amp;#39;Content-Type: application/x-shockw**e-flash&amp;#39;); //Flash动画 ###### ###声明一个下载的文件### header(&amp;#39;Content-Type: application/octet-stream&amp;#39;); header(&amp;#39;Content-Disposition: attachment; filename=&amp;#34;ITblog.</description></item><item><title/><link>https://kangkang17.cn/wiki/Python/common-function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/Python/common-function/</guid><description>常用函数 # 判断类型 def typeof(variate): type=None if isinstance(variate,int): type = &amp;#34;int&amp;#34; elif isinstance(variate,str): type = &amp;#34;str&amp;#34; elif isinstance(variate,float): type = &amp;#34;float&amp;#34; elif isinstance(variate,list): type = &amp;#34;list&amp;#34; elif isinstance(variate,tuple): type = &amp;#34;tuple&amp;#34; elif isinstance(variate,dict): type = &amp;#34;dict&amp;#34; elif isinstance(variate,set): type = &amp;#34;set&amp;#34; return type</description></item><item><title/><link>https://kangkang17.cn/wiki/Python/queue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/Python/queue/</guid><description>Queue from queue import Queue
#maxsize默认为0 ，不受限
# 一旦&amp;gt;0,消息数又达到限制 q.put()也将阻塞
q = Queue(maxsize=0)
#阻塞程序，等待队列消息
q.get()
#获取消息，设置超时时间
q.get(timeout=5.0)
#发送消息
q.put()
#等待所有的消息都被消费完
q.join()
#查询当前队列的消息个数
q.size()
#队列消息是否被消费完 True/False
q.empty()
#检测队列里消息是否已满
q.full()</description></item><item><title/><link>https://kangkang17.cn/wiki/Python/selenium/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/Python/selenium/</guid><description>历史火狐浏览器版本下载 http://ftp.mozilla.org/pub/firefox/releases/
geckodriver下载地址 https://github.com/mozilla/geckodriver/releases</description></item><item><title/><link>https://kangkang17.cn/wiki/Python/tf-idf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/Python/tf-idf/</guid><description>nlp-qa-tfidf 项目地址
介绍 tfidf 余弦短文本求相似度
用于 可用于QA问答式系统
package gensim jieba pandas
软件架构 软件架构说明
安装教程 可以直接通过 pip instsall nlp_tfidf 安装
使用说明 运行qa文件 questionList 可替换文本集</description></item><item><title/><link>https://kangkang17.cn/wiki/Python/threading/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/Python/threading/</guid><description>threading 关于线程方面
常用函数（t= threading.Thread(target=func)）： t.start() #启动线程 t.join()#阻塞子线程 待 子线程结束后再往下进行 t.is_alive() &amp;amp; t.isAlive() #判断线程是否在执行状态，在执行状态返回 true 否则返回false t.daemon = true|false #设置线程是否随主线程退出而退出，默认为False t.name=“name”# 设置线程的名字 锁 #生成全局唯一锁 lock = threading.Lock() #获取锁,未获取到会阻塞程序 直到获取到锁 才会往下执行 lock.acquire() #释放锁， lock.release() 例：
lock = threading.Lock() with lock : #业务 pass with 语句会在这个代码块执行前自动获取锁，在执行结束后自动释放锁 Event事件#通信机制 event = threading.Event() #重置event 使得所有该event事件都处于待命状态 event.clear() #等待接收event的指令 决定是否阻塞程序执行 event.wait() #发送event指令，使所有设置该event事件的线程执行 event.set() http://python.jobbole.com/81546/</description></item><item><title/><link>https://kangkang17.cn/wiki/Python/uswgi%E4%B8%8Enginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/Python/uswgi%E4%B8%8Enginx/</guid><description>python uwsgi 与nginx配置 nginx config server{ listen ***; server_name domain; charset utf-8; location / { include uwsgi_params; uwsgi_pass 127.0.0.1:PORT; uwsgi_param UWSGI_PYTHON /usr/bin/python3; // python 解释器 路径 uwsgi_param UWSGI_CHDIR /opt/dataV; // 项目目录 uwsgi_param UWSGI_SCRIPT run:app; // 项目的主程序 } } uwsgi config [uwsgi] # 监听端口 socket = 127.0.0.1:PORT # 项目根目录 chdir = /opt/dataV # python 启动文件 wsgi-file = run.py # 程序内启用的application变量名 callable = app # 进程数量 process = 4 vacuum = true master = true</description></item><item><title/><link>https://kangkang17.cn/wiki/Python/%E6%95%B0%E6%8D%AE%E9%9B%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/Python/%E6%95%B0%E6%8D%AE%E9%9B%86/</guid><description>数据集 一些训练任务的数据集
数据堂 数据堂 是国内比较大的大数据交易平台，上面有许多数据覆盖面很广，但是要收费，推荐有财力的实验室采购。网址： http://www.datatang.com/
搜狗实验室 搜狗实验室是比较权威的数据提供方提供的数据质量很高而且数据是免费的。网址： http://www.sogou.com/labs/
自然语言处理与信息检索共享平台 是中科大的信息平台，上面有一些自然语言相关的数据集。网址： http://www.nlpir.org/?action-category-catid-28
聚数力 http://dataju.cn/Dataju/web/home</description></item><item><title/><link>https://kangkang17.cn/wiki/Redis/%E5%BC%82%E6%AD%A5%E5%A4%8D%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/Redis/%E5%BC%82%E6%AD%A5%E5%A4%8D%E5%88%B6/</guid><description>master 不用配置
slave slaveof IP PORT masterauth ***</description></item><item><title/><link>https://kangkang17.cn/wiki/Target/program/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/Target/program/</guid><description>规划 规划分为两个个方面：工作、生活
工作 1. 希望在目前的公司闲暇时刻学习更多地专业知识。 2. 当前在工作方面做得更多地是业务开发，那么希望多去深入的了解业务及市场需求，为以后的道路做铺垫。 3. 技术研发也是兴趣之一，喜欢钻研一些底层知识，希望自己能学习、储备更多地知识，形成自己的知识体系。 4. 工作中用到的一些知识点应该规划起来，形成一个自己的文档库方便查阅等。 生活 1. 每天健身。 2. 多去交一些同样领域的朋友及长辈。 3. 希望与家人或朋友每两周能出去旅游或游玩，扩展下视野，放松下自己，促进下感情。 4. 多练习英语文档阅读能力及口语能力。</description></item><item><title/><link>https://kangkang17.cn/wiki/Target/target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/Target/target/</guid><description>目标 英语阅读及口语能力（循序渐进） 希望在两年内能够熟悉及慢慢使用k8s 提升对docker的理解及应用 DDD的的架构、思想深入的了解（已经在使用中，学习中） 多了解底层的知识，早日进大厂。再没进入前，还是多学习业务方面的，去发现业务市场等。</description></item><item><title/><link>https://kangkang17.cn/wiki/VUE/iView%E6%A1%88%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/VUE/iView%E6%A1%88%E4%BE%8B/</guid><description>使用iView 开发的后台管理 链接</description></item><item><title/><link>https://kangkang17.cn/wiki/%E5%BE%AE%E6%9C%8D%E5%8A%A1/consul/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/%E5%BE%AE%E6%9C%8D%E5%8A%A1/consul/</guid><description>常用的服务发现 consul：常用于go-micro mdns: go-micro 默认自带的服务发现 etcd: k8s内嵌的服务发现 zookeeper: java中比较常用
简介 consul通过dns或者http接口使服务注册和服务发现变得很容易，一些外部服务，例如：saas提供的也可以一样注册
Consul： 服务发现：consul通过dns或者http接口使服务注册和服务发现变得很容易，一些外部服务，例如：saas提供的也可以一样注册 健康检查：健康检测使consul可以快速的告警在集群中的操作。和服务发现的集成，可以防止服务转发到故障服务上面。（监测机制） 键/值存储：一些配置等 多数据中心：无需复杂的配置，即可支持任意数量的区域（最好是三台或者三台以上的consul在运行）
常用命令 consul agent
-bind=0.0.0.0 指定consul 所在的机器IP地址。默认0.0.0.0 -http-port consul 自带的web访问的默认端口：8500 -client=127.0.0.1 表明哪些机器可以访问consul。默认本机。0.0.0.0所有机器均可访问 -config-dif=foo 所有主动注册服务的 描述信息 -data-dir=path 存储所有注册过来的server机器的详细信息。 -dev 开发者模式-node=hostname 服务发现的名字 -rejoin consul 启动的时候，加入到consul集群 -server 以服务方式开启consul,允许其他的consul连接到开启的consul上（形成集群）。如果不加-servr,表示以”客户端“的方式开启。不能被链接。 -ui 可以使用web界面来查看服务发现的详情 consul members：查看集群中有多少个成员
consul info: 查看当前consul他的ip等信息
consul leave： 优雅的关闭 consul。
测试 consul agent -server -bootstrap-expect 1 -data-dir /tmp/consul -node=n1 -bind=0.0.0.0 -ui -rejoin -config-dir=/etc/consul.d/ -client 0.0.0.0 注册服务到consul步骤： 1. 进入配置文件 /etc/consul.</description></item><item><title>简介</title><link>https://kangkang17.cn/wiki/go/%E7%99%BE%E4%B8%87%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/go/%E7%99%BE%E4%B8%87%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</guid><description>Hello，我是孙十七，这是我个人的一个博客及笔记，欢迎来看；会不定期的更新，谢谢。
项目经验： 宝贝回家(公益项目,搜索视频号、公众号宝贝回家) 该项目是一个公益项目，由30W+志愿者无偿付出；此项目荣获过很多优秀的奖品，详情百度； 目标：为更多地走失人口，让他们能通过网络的力量，回到自己的家。 有幸是志愿者之一，与几个志愿者伙伴负责视频号公众号的客服开发；详情请体验；此项目有腾讯云的扶持，因此采用serverless 部署，方便快捷。 AED小搜(公益项目,搜索小程序) 该项目是一个公益项目，由100+志愿者无偿付出； 目标是：能够获取到全国的救助站地点及全国的AED地点，为那些心跳骤停的”黄金4分钟“内的人员，更快的找到AED及时脱离危险。 有幸是志愿者之一，主要负责小程序界面的开发。 云安全访问服务(阿里云) 是阿里云为企业用户提供的一体化办公安全管控平台。基于阿里云分布全国海量的边缘节点与骨干网络，将安全能力下沉至边缘，为具备多分支或门店、远程和移动办公场景的企业提供即开即用的应用管控、URL防护、关键字过滤、内网零信任访问管控、上网行为审计、内网访问行为审计等能力。 阿里云控制台搜索csas NLP-QA 模型算法地址 自己研发的一个nlp平台主要做一下关于nlp方面的api网站，可以提升自己，同时将所有api开源能提供给更多的开发者 1). 前端采用vue（vue-admin）做展示层 2). 后端采用Go(gin+gorm+DDD) 采用领域驱动 来设计程序[地址](https://github.com/yino/nlp-controller) 3). 模型算法采用Python,已完成模型 A. 机器学习：TF-IDF 余弦求文本相似度（短文本、已实现）(https://github.com/yino/nlp-tf-idf) B. 深度学习（优化版本）：KB-QA采用神经网络对文本进行提取实体识别，关系提取 生成三元组（subject，relation，object）通过tf进行神经网络训练方法提取（研发中） 4). 数据库采用Mysql+Redis redis用于存储一些热数据比如token用户身份令牌，用户配置等，以及采用发布订阅 来通过两个编程语言之间的任务调度。 5). 自己研发的一个nlp平台主要做一下关于nlp方面的api网站，可以提升自己，同时将所有api开源 壳牌润滑油（壳牌公司内部项目） 是一个直播电商项目给公司内部的代理商供货，曾单日6个小时创下业绩2亿 职责：开发 核心框架：laravel 数据库：redis+mysql mysql 主从 redis负责处理订单、人员权限等热数据 用于减少mysql压力 webserver: 5台nginx负载 Go-laravel 模仿Laravel框架开发 可以让PHP开发快速上手GO开发 锦鑫智客服语机器人（微信公众号） 此项目是智能客服系统，帮助企业等一系列线上服务行业咨询类问题回答，减少客服的成本与效率。 责任描述： 此项目是本人一人搭建，含前端后端数据库等，业务数据库采用Mysql，框架采用Tp5.0，热数据采用Redis 存储; 核心关于智能问答Api 采用一个第三方的问答api，目前已对此有解决方案； 自己建立了一个初步的模型，采用python 语言，使用jieba对question进行分词，采用word2vec 将词转换为词向量，使用tf-idf模型 进行问题归类，筛选出匹配度最高的，当然此设计有一定的弊端，能完成80%的工作，但是核心还是基于词汇的，并不是基于句义，比如 “我爱我的爸爸妈妈”和“爸爸妈妈爱我” 他会理解为一个意思，此设计有待完善。 此项目主要是基于微信公众号、 H5 和 pc 微信公众号是依托微信第三方平台，来设计。 微信公众号：比如一个公众号，只需要授权我们的平台（我们是第三方平台），通过 向公众号发送的内容 回调给我们的事件，来进行回复。 H5：手机端的界面，可以嵌入进app，微博等一些第三方软件，主要还是打开网址。 PC： 是通过加载我们的Js sdk； 此项目还有一个亮点是 人工客服，采用websocket 协议，进行消息的实时传递， 设计： user 代理到user服务器上， customer server 代理到客服服务器，中间通过消息订阅；在刚开始的时候其实一台server 就能满足，此设计是有横向扩展的能力，为以后的拓展做铺垫; 案例：高新区企业直通车（公众号） 等。 袋鼠圈体制宝（小程序） 项目负责人，负责数据库架构，项目架构，Api(RestFul),小程序，由于数据实时更新过快，所以迭代了3个版本，一期 5000个设备，每秒钟上报一次数据（gps,lbs,temperature,altitude.</description></item></channel></rss>