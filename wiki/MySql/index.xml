<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MySql on sun17 wiki</title><link>https://kangkang17.cn/wiki/MySql/</link><description>Recent content in MySql on sun17 wiki</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://kangkang17.cn/wiki/MySql/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://kangkang17.cn/wiki/MySql/mysql%E5%BC%82%E6%AD%A5%E5%A4%8D%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/MySql/mysql%E5%BC%82%E6%AD%A5%E5%A4%8D%E5%88%B6/</guid><description>#master
配置文件开启(master) server-id = 1 log_bin = /var/log/mysql/mysql-bin.log expire_logs_days = 10 max_binlog_size = 100M #创建用户 并赋予复制权限（master） create user &amp;#39;test&amp;#39;@&amp;#39;192.168.0.%&amp;#39; identified by &amp;#39;&amp;#39;; grant replication slave on *.* to &amp;#39;test&amp;#39;@&amp;#39;192.168.0.%&amp;#39;; flush privileges; #刷新权限 show master status; #查看master状态 binlog日志，position 导出master 数据 mysqldump --single-transaction --master-data=2 --triggers --routines --all-databases -uroot -p &amp;gt; all.sql #slave
将all.sql 复制到slave 服务上 scp all.sql user@ip:/var/log/mysql 导入 master 数据 mysql -uroot -p&amp;lt; all.sql 修改与master的链接 change master to master_host = &amp;#39;192.</description></item><item><title/><link>https://kangkang17.cn/wiki/MySql/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/MySql/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</guid><description>事务的隔离级别 # READ-UNCOMMITTED 可以读取事务未提交的数据；
若新增或修改的数据 在事务中 但是事务没有提交时
在其他事务中是能看到此次提交或修改后的数据。
A事务　插入数据　未提交
B事务　可以查看到A　事务中的插入数据
READ-COMMITTED 读取已经提交的数据；
只能看到提交后的数据。未提交的看不到。
A事务插入数据　未提交
B事务读取数据　不会读取到未提交事务的数据
REPEATABLE READ mysql 默认的事务隔离级别；他确保同一事务的多个实例在并发读取时，会看到同样的数据行；
比如A，B开启事务
A执行ｓｅｌｅｃｔ
B执行　ｉｎｓｅｒｔ　提交
A再次执行　ｓｅｌｅｃｔ时　依旧看不到B插入的数据；
当A要插入重复数据时（有主键或者唯一索引限制时），则插入失败，因为数据已存在，只是在A事件中看不到；
４. Serializable 事务最高的隔离级别，这个就比较狠了，并发下不适合使用，容易造成大量的阻塞；
例子（操作同一张表）：
１）
A开启事务　执行插入语句未提交；
B执行清空表　则阻塞，A不提交B一直阻塞，等待A的事务完成；
２）
A开启事务　执行写操作时，未提交；
B开启事务　执行任何操作　全部阻塞等待A事务的提交完成；
C等待Ｂ．．．．序列化的等待；</description></item><item><title/><link>https://kangkang17.cn/wiki/MySql/%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/MySql/%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0/</guid><description>创建函数
CREATE DEFINER=`location`@`%` PROCEDURE `create_slave_tract`() BEGIN declare str_date varchar(16); SET str_date = date_format(now(),&amp;#34;%Y%m%d&amp;#34;); SET @sqlcmd2 = concat(&amp;#39;create table tb_slave_track_&amp;#39;,str_date,&amp;#34;(`id` int(10) NOT NULL AUTO_INCREMENT, `longitude` char(60) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `latitude` char(60) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `create_time` datetime(0) NULL DEFAULT NULL, `slave_id` int(11) NULL DEFAULT NULL, `code` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `electric_quantity` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `speed` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `elevation` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `pose` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `ip` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `port` int(10) NULL DEFAULT NULL, `frequency` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `signal` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `IMSI` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `type` TINYINT(1) NULL DEFAULT NULL, PRIMARY KEY (`id`) USING BTREE )&amp;#34;); PREPARE p2 FROM @sqlcmd2; EXECUTE p2; DEALLOCATE PREPARE p2; END</description></item><item><title/><link>https://kangkang17.cn/wiki/MySql/%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%B9%B6%E6%8E%88%E6%9D%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/MySql/%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%B9%B6%E6%8E%88%E6%9D%83/</guid><description>创建用户及密码及授权 # //创建用户 create user &amp;#39;username&amp;#39;@&amp;#39;ip&amp;#39; identified by &amp;#39;password&amp;#39;; //授权 (备注) grant all(select,insert,update,delete) on databasesname.tablename(*) to &amp;#39;username&amp;#39;@&amp;#39;ip&amp;#39;;</description></item><item><title/><link>https://kangkang17.cn/wiki/MySql/%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/MySql/%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/</guid><description>常用函数 # inet_aton() inet_ntoa() // 举例: INSERT INTO sessions(ipaddress) VALUES(INET_ATON(&amp;#39;192.168.0.1&amp;#39;)); select INET_NTOA(ipaddress) from sessions;</description></item><item><title/><link>https://kangkang17.cn/wiki/MySql/%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kangkang17.cn/wiki/MySql/%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/</guid><description>忘记密码 # mysql配置文件下增加 可跳过密码登录 然后 再去修改root密码就好: &amp;ndash;skip-grant-tables</description></item></channel></rss>